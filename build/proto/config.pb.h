/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_CONFIG_PB_H_INCLUDED
#define PB_CONFIG_PB_H_INCLUDED
#include <pb.h>
#include "enums.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _GamepadOptions {
    bool has_inputMode;
    InputMode inputMode;
    bool has_dpadMode;
    DpadMode dpadMode;
    bool has_socdMode;
    SOCDMode socdMode;
    bool has_invertXAxis;
    bool invertXAxis;
    bool has_invertYAxis;
    bool invertYAxis;
    bool has_switchTpShareForDs4;
    bool switchTpShareForDs4;
    bool has_lockHotkeys;
    bool lockHotkeys;
    bool has_fourWayMode;
    bool fourWayMode;
    bool has_profileNumber;
    uint32_t profileNumber;
    bool has_ps4ControllerType;
    PS4ControllerType ps4ControllerType;
    bool has_debounceDelay;
    uint32_t debounceDelay;
    bool has_inputModeB1;
    int32_t inputModeB1;
    bool has_inputModeB2;
    int32_t inputModeB2;
    bool has_inputModeB3;
    int32_t inputModeB3;
    bool has_inputModeB4;
    int32_t inputModeB4;
    bool has_inputModeL1;
    int32_t inputModeL1;
    bool has_inputModeL2;
    int32_t inputModeL2;
    bool has_inputModeR1;
    int32_t inputModeR1;
    bool has_inputModeR2;
    int32_t inputModeR2;
    bool has_ps4ReportHack;
    bool ps4ReportHack;
    bool has_ps4AuthType;
    InputModeAuthType ps4AuthType;
    bool has_ps5AuthType;
    InputModeAuthType ps5AuthType;
    bool has_xinputAuthType;
    InputModeAuthType xinputAuthType;
    bool has_ps4ControllerIDMode;
    PS4ControllerIDMode ps4ControllerIDMode;
} GamepadOptions;

typedef struct _KeyboardMapping {
    bool has_keyDpadUp;
    uint32_t keyDpadUp;
    bool has_keyDpadDown;
    uint32_t keyDpadDown;
    bool has_keyDpadLeft;
    uint32_t keyDpadLeft;
    bool has_keyDpadRight;
    uint32_t keyDpadRight;
    bool has_keyButtonB1;
    uint32_t keyButtonB1;
    bool has_keyButtonB2;
    uint32_t keyButtonB2;
    bool has_keyButtonB3;
    uint32_t keyButtonB3;
    bool has_keyButtonB4;
    uint32_t keyButtonB4;
    bool has_keyButtonL1;
    uint32_t keyButtonL1;
    bool has_keyButtonR1;
    uint32_t keyButtonR1;
    bool has_keyButtonL2;
    uint32_t keyButtonL2;
    bool has_keyButtonR2;
    uint32_t keyButtonR2;
    bool has_keyButtonS1;
    uint32_t keyButtonS1;
    bool has_keyButtonS2;
    uint32_t keyButtonS2;
    bool has_keyButtonL3;
    uint32_t keyButtonL3;
    bool has_keyButtonR3;
    uint32_t keyButtonR3;
    bool has_keyButtonA1;
    uint32_t keyButtonA1;
    bool has_keyButtonA2;
    uint32_t keyButtonA2;
    bool has_keyButtonA3;
    uint32_t keyButtonA3;
    bool has_keyButtonA4;
    uint32_t keyButtonA4;
    bool has_keyButtonE1;
    uint32_t keyButtonE1;
    bool has_keyButtonE2;
    uint32_t keyButtonE2;
    bool has_keyButtonE3;
    uint32_t keyButtonE3;
    bool has_keyButtonE4;
    uint32_t keyButtonE4;
    bool has_keyButtonE5;
    uint32_t keyButtonE5;
    bool has_keyButtonE6;
    uint32_t keyButtonE6;
    bool has_keyButtonE7;
    uint32_t keyButtonE7;
    bool has_keyButtonE8;
    uint32_t keyButtonE8;
    bool has_keyButtonE9;
    uint32_t keyButtonE9;
    bool has_keyButtonE10;
    uint32_t keyButtonE10;
    bool has_keyButtonE11;
    uint32_t keyButtonE11;
    bool has_keyButtonE12;
    uint32_t keyButtonE12;
} KeyboardMapping;

typedef struct _HotkeyEntry {
    bool has_dpadMask;
    uint32_t dpadMask;
    bool has_action;
    GamepadHotkey action;
    bool has_buttonsMask;
    uint32_t buttonsMask;
    bool has_auxMask;
    uint32_t auxMask;
} HotkeyEntry;

typedef struct _HotkeyOptions {
    bool has_hotkey01;
    HotkeyEntry hotkey01;
    bool has_hotkey02;
    HotkeyEntry hotkey02;
    bool has_hotkey03;
    HotkeyEntry hotkey03;
    bool has_hotkey04;
    HotkeyEntry hotkey04;
    bool has_hotkey05;
    HotkeyEntry hotkey05;
    bool has_hotkey06;
    HotkeyEntry hotkey06;
    bool has_hotkey07;
    HotkeyEntry hotkey07;
    bool has_hotkey08;
    HotkeyEntry hotkey08;
    bool has_hotkey09;
    HotkeyEntry hotkey09;
    bool has_hotkey10;
    HotkeyEntry hotkey10;
    bool has_hotkey11;
    HotkeyEntry hotkey11;
    bool has_hotkey12;
    HotkeyEntry hotkey12;
    bool has_hotkey13;
    HotkeyEntry hotkey13;
    bool has_hotkey14;
    HotkeyEntry hotkey14;
    bool has_hotkey15;
    HotkeyEntry hotkey15;
    bool has_hotkey16;
    HotkeyEntry hotkey16;
} HotkeyOptions;

typedef struct _PeripheralOptions_I2COptions {
    bool has_enabled;
    bool enabled;
    bool has_sda;
    int32_t sda;
    bool has_scl;
    int32_t scl;
    bool has_speed;
    uint32_t speed;
} PeripheralOptions_I2COptions;

typedef struct _PeripheralOptions_SPIOptions {
    bool has_enabled;
    bool enabled;
    bool has_rx;
    int32_t rx;
    bool has_cs;
    int32_t cs;
    bool has_sck;
    int32_t sck;
    bool has_tx;
    int32_t tx;
} PeripheralOptions_SPIOptions;

typedef struct _PeripheralOptions_USBOptions {
    bool has_enabled;
    bool enabled;
    bool has_dp;
    int32_t dp;
    bool has_enable5v;
    int32_t enable5v;
    bool has_order;
    uint32_t order;
} PeripheralOptions_USBOptions;

typedef struct _PeripheralOptions {
    bool has_blockI2C0;
    PeripheralOptions_I2COptions blockI2C0;
    bool has_blockI2C1;
    PeripheralOptions_I2COptions blockI2C1;
    bool has_blockSPI0;
    PeripheralOptions_SPIOptions blockSPI0;
    bool has_blockSPI1;
    PeripheralOptions_SPIOptions blockSPI1;
    bool has_blockUSB0;
    PeripheralOptions_USBOptions blockUSB0;
} PeripheralOptions;

typedef struct _ForcedSetupOptions {
    bool has_mode;
    ForcedSetupMode mode;
} ForcedSetupOptions;

typedef struct _ButtonLayoutParamsCommon {
    bool has_startX;
    int32_t startX;
    bool has_startY;
    int32_t startY;
    bool has_buttonRadius;
    int32_t buttonRadius;
    bool has_buttonPadding;
    int32_t buttonPadding;
} ButtonLayoutParamsCommon;

typedef struct _ButtonLayoutParamsLeft {
    bool has_layout;
    ButtonLayout layout;
    bool has_common;
    ButtonLayoutParamsCommon common;
} ButtonLayoutParamsLeft;

typedef struct _ButtonLayoutParamsRight {
    bool has_layout;
    ButtonLayoutRight layout;
    bool has_common;
    ButtonLayoutParamsCommon common;
} ButtonLayoutParamsRight;

typedef struct _ButtonLayoutCustomOptions {
    bool has_paramsLeft;
    ButtonLayoutParamsLeft paramsLeft;
    bool has_paramsRight;
    ButtonLayoutParamsRight paramsRight;
} ButtonLayoutCustomOptions;

typedef struct _PinMappings {
    bool has_pinDpadUp;
    int32_t pinDpadUp;
    bool has_pinDpadDown;
    int32_t pinDpadDown;
    bool has_pinDpadLeft;
    int32_t pinDpadLeft;
    bool has_pinDpadRight;
    int32_t pinDpadRight;
    bool has_pinButtonB1;
    int32_t pinButtonB1;
    bool has_pinButtonB2;
    int32_t pinButtonB2;
    bool has_pinButtonB3;
    int32_t pinButtonB3;
    bool has_pinButtonB4;
    int32_t pinButtonB4;
    bool has_pinButtonL1;
    int32_t pinButtonL1;
    bool has_pinButtonR1;
    int32_t pinButtonR1;
    bool has_pinButtonL2;
    int32_t pinButtonL2;
    bool has_pinButtonR2;
    int32_t pinButtonR2;
    bool has_pinButtonS1;
    int32_t pinButtonS1;
    bool has_pinButtonS2;
    int32_t pinButtonS2;
    bool has_pinButtonL3;
    int32_t pinButtonL3;
    bool has_pinButtonR3;
    int32_t pinButtonR3;
    bool has_pinButtonA1;
    int32_t pinButtonA1;
    bool has_pinButtonA2;
    int32_t pinButtonA2;
    bool has_pinButtonFn;
    int32_t pinButtonFn;
} PinMappings;

typedef struct _GpioMappingInfo {
    bool has_action;
    GpioAction action;
    bool has_direction;
    GpioDirection direction;
    bool has_customDpadMask;
    uint32_t customDpadMask;
    bool has_customButtonMask;
    uint32_t customButtonMask;
} GpioMappingInfo;

typedef struct _GpioMappings {
    pb_size_t pins_count;
    GpioMappingInfo pins[30];
    bool has_profileLabel;
    char profileLabel[17];
    bool has_enabled;
    bool enabled;
} GpioMappings;

typedef struct _AlternativePinMappings {
    bool has_pinButtonB1;
    int32_t pinButtonB1;
    bool has_pinButtonB2;
    int32_t pinButtonB2;
    bool has_pinButtonB3;
    int32_t pinButtonB3;
    bool has_pinButtonB4;
    int32_t pinButtonB4;
    bool has_pinButtonL1;
    int32_t pinButtonL1;
    bool has_pinButtonR1;
    int32_t pinButtonR1;
    bool has_pinButtonL2;
    int32_t pinButtonL2;
    bool has_pinButtonR2;
    int32_t pinButtonR2;
    bool has_pinDpadUp;
    int32_t pinDpadUp;
    bool has_pinDpadDown;
    int32_t pinDpadDown;
    bool has_pinDpadLeft;
    int32_t pinDpadLeft;
    bool has_pinDpadRight;
    int32_t pinDpadRight;
} AlternativePinMappings;

typedef struct _ProfileOptions {
    pb_size_t deprecatedAlternativePinMappings_count;
    AlternativePinMappings deprecatedAlternativePinMappings[3];
    pb_size_t gpioMappingsSets_count;
    GpioMappings gpioMappingsSets[3];
} ProfileOptions;

typedef PB_BYTES_ARRAY_T(1024) DisplayOptions_splashImage_t;
typedef struct _DisplayOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedI2cBlock;
    int32_t deprecatedI2cBlock;
    bool has_deprecatedI2cSDAPin;
    int32_t deprecatedI2cSDAPin;
    bool has_deprecatedI2cSCLPin;
    int32_t deprecatedI2cSCLPin;
    bool has_deprecatedI2cAddress;
    int32_t deprecatedI2cAddress;
    bool has_deprecatedI2cSpeed;
    int32_t deprecatedI2cSpeed;
    bool has_buttonLayout;
    ButtonLayout buttonLayout;
    bool has_buttonLayoutRight;
    ButtonLayoutRight buttonLayoutRight;
    bool has_buttonLayoutCustomOptions;
    ButtonLayoutCustomOptions buttonLayoutCustomOptions;
    bool has_splashMode;
    SplashMode splashMode;
    bool has_splashChoice;
    SplashChoice splashChoice;
    bool has_splashDuration;
    int32_t splashDuration;
    bool has_splashImage;
    DisplayOptions_splashImage_t splashImage;
    bool has_size;
    int32_t size;
    bool has_flip;
    int32_t flip;
    bool has_invert;
    bool invert;
    bool has_displaySaverTimeout;
    int32_t displaySaverTimeout;
    bool has_turnOffWhenSuspended;
    bool turnOffWhenSuspended;
} DisplayOptions;

typedef struct _LEDOptions {
    bool has_dataPin;
    int32_t dataPin;
    bool has_ledFormat;
    LEDFormat_Proto ledFormat;
    bool has_ledLayout;
    ButtonLayout ledLayout;
    bool has_ledsPerButton;
    uint32_t ledsPerButton;
    bool has_brightnessMaximum;
    uint32_t brightnessMaximum;
    bool has_brightnessSteps;
    uint32_t brightnessSteps;
    bool has_indexUp;
    int32_t indexUp;
    bool has_indexDown;
    int32_t indexDown;
    bool has_indexLeft;
    int32_t indexLeft;
    bool has_indexRight;
    int32_t indexRight;
    bool has_indexB1;
    int32_t indexB1;
    bool has_indexB2;
    int32_t indexB2;
    bool has_indexB3;
    int32_t indexB3;
    bool has_indexB4;
    int32_t indexB4;
    bool has_indexL1;
    int32_t indexL1;
    bool has_indexR1;
    int32_t indexR1;
    bool has_indexL2;
    int32_t indexL2;
    bool has_indexR2;
    int32_t indexR2;
    bool has_indexS1;
    int32_t indexS1;
    bool has_indexS2;
    int32_t indexS2;
    bool has_indexL3;
    int32_t indexL3;
    bool has_indexR3;
    int32_t indexR3;
    bool has_indexA1;
    int32_t indexA1;
    bool has_indexA2;
    int32_t indexA2;
    bool has_pledType;
    PLEDType pledType;
    bool has_pledPin1;
    int32_t pledPin1;
    bool has_pledPin2;
    int32_t pledPin2;
    bool has_pledPin3;
    int32_t pledPin3;
    bool has_pledPin4;
    int32_t pledPin4;
    bool has_pledColor;
    uint32_t pledColor;
    bool has_turnOffWhenSuspended;
    bool turnOffWhenSuspended;
    bool has_pledIndex1;
    int32_t pledIndex1;
    bool has_pledIndex2;
    int32_t pledIndex2;
    bool has_pledIndex3;
    int32_t pledIndex3;
    bool has_pledIndex4;
    int32_t pledIndex4;
} LEDOptions;

/* This has to be kept in sync with AnimationOptions in AnimationStation.hpp */
typedef struct _AnimationOptions_Proto {
    bool has_baseAnimationIndex;
    uint32_t baseAnimationIndex;
    bool has_brightness;
    uint32_t brightness;
    bool has_staticColorIndex;
    uint32_t staticColorIndex;
    bool has_buttonColorIndex;
    uint32_t buttonColorIndex;
    bool has_chaseCycleTime;
    int32_t chaseCycleTime;
    bool has_rainbowCycleTime;
    int32_t rainbowCycleTime;
    bool has_themeIndex;
    uint32_t themeIndex;
    bool has_hasCustomTheme;
    bool hasCustomTheme;
    bool has_customThemeUp;
    uint32_t customThemeUp;
    bool has_customThemeDown;
    uint32_t customThemeDown;
    bool has_customThemeLeft;
    uint32_t customThemeLeft;
    bool has_customThemeRight;
    uint32_t customThemeRight;
    bool has_customThemeB1;
    uint32_t customThemeB1;
    bool has_customThemeB2;
    uint32_t customThemeB2;
    bool has_customThemeB3;
    uint32_t customThemeB3;
    bool has_customThemeB4;
    uint32_t customThemeB4;
    bool has_customThemeL1;
    uint32_t customThemeL1;
    bool has_customThemeR1;
    uint32_t customThemeR1;
    bool has_customThemeL2;
    uint32_t customThemeL2;
    bool has_customThemeR2;
    uint32_t customThemeR2;
    bool has_customThemeS1;
    uint32_t customThemeS1;
    bool has_customThemeS2;
    uint32_t customThemeS2;
    bool has_customThemeL3;
    uint32_t customThemeL3;
    bool has_customThemeR3;
    uint32_t customThemeR3;
    bool has_customThemeA1;
    uint32_t customThemeA1;
    bool has_customThemeA2;
    uint32_t customThemeA2;
    bool has_customThemeUpPressed;
    uint32_t customThemeUpPressed;
    bool has_customThemeDownPressed;
    uint32_t customThemeDownPressed;
    bool has_customThemeLeftPressed;
    uint32_t customThemeLeftPressed;
    bool has_customThemeRightPressed;
    uint32_t customThemeRightPressed;
    bool has_customThemeB1Pressed;
    uint32_t customThemeB1Pressed;
    bool has_customThemeB2Pressed;
    uint32_t customThemeB2Pressed;
    bool has_customThemeB3Pressed;
    uint32_t customThemeB3Pressed;
    bool has_customThemeB4Pressed;
    uint32_t customThemeB4Pressed;
    bool has_customThemeL1Pressed;
    uint32_t customThemeL1Pressed;
    bool has_customThemeR1Pressed;
    uint32_t customThemeR1Pressed;
    bool has_customThemeL2Pressed;
    uint32_t customThemeL2Pressed;
    bool has_customThemeR2Pressed;
    uint32_t customThemeR2Pressed;
    bool has_customThemeS1Pressed;
    uint32_t customThemeS1Pressed;
    bool has_customThemeS2Pressed;
    uint32_t customThemeS2Pressed;
    bool has_customThemeL3Pressed;
    uint32_t customThemeL3Pressed;
    bool has_customThemeR3Pressed;
    uint32_t customThemeR3Pressed;
    bool has_customThemeA1Pressed;
    uint32_t customThemeA1Pressed;
    bool has_customThemeA2Pressed;
    uint32_t customThemeA2Pressed;
    bool has_buttonPressColorCooldownTimeInMs;
    uint32_t buttonPressColorCooldownTimeInMs;
} AnimationOptions_Proto;

typedef struct _BootselButtonOptions {
    bool has_enabled;
    bool enabled;
    bool has_buttonMap;
    uint32_t buttonMap;
} BootselButtonOptions;

typedef struct _OnBoardLedOptions {
    bool has_mode;
    OnBoardLedMode mode;
    bool has_enabled;
    bool enabled;
} OnBoardLedOptions;

typedef struct _AnalogOptions {
    bool has_enabled;
    bool enabled;
    bool has_analogAdc1PinX;
    int32_t analogAdc1PinX;
    bool has_analogAdc1PinY;
    int32_t analogAdc1PinY;
    bool has_forced_circularity;
    bool forced_circularity;
    bool has_inner_deadzone;
    uint32_t inner_deadzone;
    bool has_analogAdc2PinX;
    int32_t analogAdc2PinX;
    bool has_analogAdc2PinY;
    int32_t analogAdc2PinY;
    bool has_analogAdc1Mode;
    DpadMode analogAdc1Mode;
    bool has_analogAdc2Mode;
    DpadMode analogAdc2Mode;
    bool has_analogAdc1Invert;
    InvertMode analogAdc1Invert;
    bool has_analogAdc2Invert;
    InvertMode analogAdc2Invert;
    bool has_auto_calibrate;
    bool auto_calibrate;
    bool has_outer_deadzone;
    uint32_t outer_deadzone;
    bool has_analog_smoothing;
    bool analog_smoothing;
    bool has_smoothing_factor;
    float smoothing_factor;
    bool has_analog_error;
    uint32_t analog_error;
} AnalogOptions;

typedef struct _TurboOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedButtonPin;
    int32_t deprecatedButtonPin;
    bool has_ledPin;
    int32_t ledPin;
    bool has_shotCount;
    uint32_t shotCount;
    bool has_shmupDialPin;
    int32_t shmupDialPin;
    bool has_shmupModeEnabled;
    bool shmupModeEnabled;
    bool has_shmupAlwaysOn1;
    uint32_t shmupAlwaysOn1;
    bool has_shmupAlwaysOn2;
    uint32_t shmupAlwaysOn2;
    bool has_shmupAlwaysOn3;
    uint32_t shmupAlwaysOn3;
    bool has_shmupAlwaysOn4;
    uint32_t shmupAlwaysOn4;
    bool has_shmupBtn1Pin;
    int32_t shmupBtn1Pin;
    bool has_shmupBtn2Pin;
    int32_t shmupBtn2Pin;
    bool has_shmupBtn3Pin;
    int32_t shmupBtn3Pin;
    bool has_shmupBtn4Pin;
    int32_t shmupBtn4Pin;
    bool has_shmupBtnMask1;
    uint32_t shmupBtnMask1;
    bool has_shmupBtnMask2;
    uint32_t shmupBtnMask2;
    bool has_shmupBtnMask3;
    uint32_t shmupBtnMask3;
    bool has_shmupBtnMask4;
    uint32_t shmupBtnMask4;
    bool has_shmupMixMode;
    ShmupMixMode shmupMixMode;
} TurboOptions;

typedef struct _SliderOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedPinSliderOne;
    int32_t deprecatedPinSliderOne;
    bool has_deprecatedPinSliderTwo;
    int32_t deprecatedPinSliderTwo;
    bool has_deprecatedModeOne;
    DpadMode deprecatedModeOne;
    bool has_deprecatedModeTwo;
    DpadMode deprecatedModeTwo;
    bool has_deprecatedModeDefault;
    DpadMode deprecatedModeDefault;
} SliderOptions;

typedef struct _SOCDSliderOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedPinOne;
    int32_t deprecatedPinOne;
    bool has_deprecatedPinTwo;
    int32_t deprecatedPinTwo;
    bool has_modeDefault;
    SOCDMode modeDefault;
    bool has_deprecatedModeOne;
    SOCDMode deprecatedModeOne;
    bool has_deprecatedModeTwo;
    SOCDMode deprecatedModeTwo;
} SOCDSliderOptions;

typedef struct _ReverseOptions {
    bool has_enabled;
    bool enabled;
    bool has_buttonPin;
    int32_t buttonPin;
    bool has_ledPin;
    int32_t ledPin;
    bool has_actionUp;
    uint32_t actionUp;
    bool has_actionDown;
    uint32_t actionDown;
    bool has_actionLeft;
    uint32_t actionLeft;
    bool has_actionRight;
    uint32_t actionRight;
} ReverseOptions;

typedef struct _AnalogADS1219Options {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedI2cBlock;
    int32_t deprecatedI2cBlock;
    bool has_deprecatedI2cSDAPin;
    int32_t deprecatedI2cSDAPin;
    bool has_deprecatedI2cSCLPin;
    int32_t deprecatedI2cSCLPin;
    bool has_deprecatedI2cAddress;
    int32_t deprecatedI2cAddress;
    bool has_deprecatedI2cSpeed;
    int32_t deprecatedI2cSpeed;
} AnalogADS1219Options;

typedef struct _AnalogADS1256Options {
    bool has_enabled;
    bool enabled;
    bool has_spiBlock;
    int32_t spiBlock;
    bool has_csPin;
    int32_t csPin;
    bool has_drdyPin;
    int32_t drdyPin;
    bool has_avdd;
    float avdd;
    bool has_enableTriggers;
    bool enableTriggers;
} AnalogADS1256Options;

typedef struct _DualDirectionalOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedUpPin;
    int32_t deprecatedUpPin;
    bool has_deprecatedDownPin;
    int32_t deprecatedDownPin;
    bool has_deprecatedLeftPin;
    int32_t deprecatedLeftPin;
    bool has_deprecatedRightPin;
    int32_t deprecatedRightPin;
    bool has_dpadMode;
    DpadMode dpadMode;
    bool has_combineMode;
    DualDirectionalCombinationMode combineMode;
    bool has_fourWayMode;
    bool fourWayMode;
} DualDirectionalOptions;

typedef struct _TiltOptions {
    bool has_enabled;
    bool enabled;
    bool has_tilt1Pin;
    int32_t tilt1Pin;
    bool has_tilt2Pin;
    int32_t tilt2Pin;
    bool has_deprecatedTiltFunctionPin;
    int32_t deprecatedTiltFunctionPin;
    bool has_tiltLeftAnalogUpPin;
    int32_t tiltLeftAnalogUpPin;
    bool has_tiltLeftAnalogDownPin;
    int32_t tiltLeftAnalogDownPin;
    bool has_tiltLeftAnalogLeftPin;
    int32_t tiltLeftAnalogLeftPin;
    bool has_tiltLeftAnalogRightPin;
    int32_t tiltLeftAnalogRightPin;
    bool has_tiltRightAnalogUpPin;
    int32_t tiltRightAnalogUpPin;
    bool has_tiltRightAnalogDownPin;
    int32_t tiltRightAnalogDownPin;
    bool has_tiltRightAnalogLeftPin;
    int32_t tiltRightAnalogLeftPin;
    bool has_tiltRightAnalogRightPin;
    int32_t tiltRightAnalogRightPin;
    bool has_tiltSOCDMode;
    SOCDMode tiltSOCDMode;
    bool has_factorTilt1LeftX;
    int32_t factorTilt1LeftX;
    bool has_factorTilt1LeftY;
    int32_t factorTilt1LeftY;
    bool has_factorTilt1RightX;
    int32_t factorTilt1RightX;
    bool has_factorTilt1RightY;
    int32_t factorTilt1RightY;
    bool has_factorTilt2LeftX;
    int32_t factorTilt2LeftX;
    bool has_factorTilt2LeftY;
    int32_t factorTilt2LeftY;
    bool has_factorTilt2RightX;
    int32_t factorTilt2RightX;
    bool has_factorTilt2RightY;
    int32_t factorTilt2RightY;
} TiltOptions;

typedef struct _BuzzerOptions {
    bool has_enabled;
    bool enabled;
    bool has_pin;
    int32_t pin;
    bool has_volume;
    uint32_t volume;
    bool has_enablePin;
    int32_t enablePin;
} BuzzerOptions;

typedef struct _ExtraButtonOptions {
    bool has_enabled;
    bool enabled;
    bool has_pin;
    int32_t pin;
    bool has_buttonMap;
    uint32_t buttonMap;
} ExtraButtonOptions;

typedef struct _PlayerNumberOptions {
    bool has_enabled;
    bool enabled;
    bool has_number;
    uint32_t number;
} PlayerNumberOptions;

typedef PB_BYTES_ARRAY_T(16) PS4Options_serial_t;
typedef PB_BYTES_ARRAY_T(256) PS4Options_signature_t;
typedef PB_BYTES_ARRAY_T(256) PS4Options_rsaN_t;
typedef PB_BYTES_ARRAY_T(4) PS4Options_rsaE_t;
typedef PB_BYTES_ARRAY_T(256) PS4Options_rsaD_t;
typedef PB_BYTES_ARRAY_T(128) PS4Options_rsaP_t;
typedef PB_BYTES_ARRAY_T(128) PS4Options_rsaQ_t;
typedef PB_BYTES_ARRAY_T(128) PS4Options_rsaDP_t;
typedef PB_BYTES_ARRAY_T(128) PS4Options_rsaDQ_t;
typedef PB_BYTES_ARRAY_T(128) PS4Options_rsaQP_t;
typedef PB_BYTES_ARRAY_T(256) PS4Options_rsaRN_t;
typedef struct _PS4Options {
    bool has_enabled;
    bool enabled;
    bool has_serial;
    PS4Options_serial_t serial;
    bool has_signature;
    PS4Options_signature_t signature;
    bool has_rsaN;
    PS4Options_rsaN_t rsaN;
    bool has_rsaE;
    PS4Options_rsaE_t rsaE;
    bool has_rsaD;
    PS4Options_rsaD_t rsaD;
    bool has_rsaP;
    PS4Options_rsaP_t rsaP;
    bool has_rsaQ;
    PS4Options_rsaQ_t rsaQ;
    bool has_rsaDP;
    PS4Options_rsaDP_t rsaDP;
    bool has_rsaDQ;
    PS4Options_rsaDQ_t rsaDQ;
    bool has_rsaQP;
    PS4Options_rsaQP_t rsaQP;
    bool has_rsaRN;
    PS4Options_rsaRN_t rsaRN;
} PS4Options;

typedef struct _PSPassthroughOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedPinDplus;
    int32_t deprecatedPinDplus;
    bool has_deprecatedPin5V;
    int32_t deprecatedPin5V;
} PSPassthroughOptions;

typedef struct _XBOnePassthroughOptions {
    bool has_enabled;
    bool enabled;
} XBOnePassthroughOptions;

typedef struct _WiiOptions_AnalogAxis {
    bool has_axisType;
    int32_t axisType;
    bool has_minRange;
    int32_t minRange;
    bool has_maxRange;
    int32_t maxRange;
} WiiOptions_AnalogAxis;

typedef struct _WiiOptions_StickOptions {
    bool has_x;
    WiiOptions_AnalogAxis x;
    bool has_y;
    WiiOptions_AnalogAxis y;
} WiiOptions_StickOptions;

typedef struct _WiiOptions_NunchukOptions {
    bool has_buttonC;
    int32_t buttonC;
    bool has_buttonZ;
    int32_t buttonZ;
    bool has_stick;
    WiiOptions_StickOptions stick;
} WiiOptions_NunchukOptions;

typedef struct _WiiOptions_ClassicOptions {
    bool has_buttonA;
    int32_t buttonA;
    bool has_buttonB;
    int32_t buttonB;
    bool has_buttonX;
    int32_t buttonX;
    bool has_buttonY;
    int32_t buttonY;
    bool has_buttonL;
    int32_t buttonL;
    bool has_buttonZL;
    int32_t buttonZL;
    bool has_buttonR;
    int32_t buttonR;
    bool has_buttonZR;
    int32_t buttonZR;
    bool has_buttonMinus;
    int32_t buttonMinus;
    bool has_buttonPlus;
    int32_t buttonPlus;
    bool has_buttonHome;
    int32_t buttonHome;
    bool has_buttonUp;
    int32_t buttonUp;
    bool has_buttonDown;
    int32_t buttonDown;
    bool has_buttonLeft;
    int32_t buttonLeft;
    bool has_buttonRight;
    int32_t buttonRight;
    bool has_leftStick;
    WiiOptions_StickOptions leftStick;
    bool has_rightStick;
    WiiOptions_StickOptions rightStick;
    bool has_leftTrigger;
    WiiOptions_AnalogAxis leftTrigger;
    bool has_rightTrigger;
    WiiOptions_AnalogAxis rightTrigger;
} WiiOptions_ClassicOptions;

typedef struct _WiiOptions_TaikoOptions {
    bool has_buttonKatLeft;
    int32_t buttonKatLeft;
    bool has_buttonKatRight;
    int32_t buttonKatRight;
    bool has_buttonDonLeft;
    int32_t buttonDonLeft;
    bool has_buttonDonRight;
    int32_t buttonDonRight;
} WiiOptions_TaikoOptions;

typedef struct _WiiOptions_GuitarOptions {
    bool has_buttonRed;
    int32_t buttonRed;
    bool has_buttonGreen;
    int32_t buttonGreen;
    bool has_buttonYellow;
    int32_t buttonYellow;
    bool has_buttonBlue;
    int32_t buttonBlue;
    bool has_buttonOrange;
    int32_t buttonOrange;
    bool has_buttonPedal;
    int32_t buttonPedal;
    bool has_buttonMinus;
    int32_t buttonMinus;
    bool has_buttonPlus;
    int32_t buttonPlus;
    bool has_strumUp;
    int32_t strumUp;
    bool has_strumDown;
    int32_t strumDown;
    bool has_stick;
    WiiOptions_StickOptions stick;
    bool has_whammyBar;
    WiiOptions_AnalogAxis whammyBar;
} WiiOptions_GuitarOptions;

typedef struct _WiiOptions_DrumOptions {
    bool has_buttonRed;
    int32_t buttonRed;
    bool has_buttonGreen;
    int32_t buttonGreen;
    bool has_buttonYellow;
    int32_t buttonYellow;
    bool has_buttonBlue;
    int32_t buttonBlue;
    bool has_buttonOrange;
    int32_t buttonOrange;
    bool has_buttonPedal;
    int32_t buttonPedal;
    bool has_buttonMinus;
    int32_t buttonMinus;
    bool has_buttonPlus;
    int32_t buttonPlus;
    bool has_stick;
    WiiOptions_StickOptions stick;
} WiiOptions_DrumOptions;

typedef struct _WiiOptions_TurntableOptions {
    bool has_buttonLeftRed;
    int32_t buttonLeftRed;
    bool has_buttonLeftGreen;
    int32_t buttonLeftGreen;
    bool has_buttonLeftBlue;
    int32_t buttonLeftBlue;
    bool has_buttonRightRed;
    int32_t buttonRightRed;
    bool has_buttonRightGreen;
    int32_t buttonRightGreen;
    bool has_buttonRightBlue;
    int32_t buttonRightBlue;
    bool has_buttonMinus;
    int32_t buttonMinus;
    bool has_buttonPlus;
    int32_t buttonPlus;
    bool has_buttonEuphoria;
    int32_t buttonEuphoria;
    bool has_stick;
    WiiOptions_StickOptions stick;
    bool has_leftTurntable;
    WiiOptions_AnalogAxis leftTurntable;
    bool has_rightTurntable;
    WiiOptions_AnalogAxis rightTurntable;
    bool has_effects;
    WiiOptions_AnalogAxis effects;
    bool has_fader;
    WiiOptions_AnalogAxis fader;
} WiiOptions_TurntableOptions;

typedef struct _WiiOptions_ControllerOptions {
    bool has_nunchuk;
    WiiOptions_NunchukOptions nunchuk;
    bool has_classic;
    WiiOptions_ClassicOptions classic;
    bool has_taiko;
    WiiOptions_TaikoOptions taiko;
    bool has_guitar;
    WiiOptions_GuitarOptions guitar;
    bool has_drum;
    WiiOptions_DrumOptions drum;
    bool has_turntable;
    WiiOptions_TurntableOptions turntable;
} WiiOptions_ControllerOptions;

typedef struct _WiiOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedI2cBlock;
    int32_t deprecatedI2cBlock;
    bool has_deprecatedI2cSDAPin;
    int32_t deprecatedI2cSDAPin;
    bool has_deprecatedI2cSCLPin;
    int32_t deprecatedI2cSCLPin;
    bool has_deprecatedI2cSpeed;
    int32_t deprecatedI2cSpeed;
    bool has_controllers;
    WiiOptions_ControllerOptions controllers;
} WiiOptions;

typedef struct _SNESOptions {
    bool has_enabled;
    bool enabled;
    bool has_clockPin;
    int32_t clockPin;
    bool has_latchPin;
    int32_t latchPin;
    bool has_dataPin;
    int32_t dataPin;
} SNESOptions;

typedef struct _KeyboardHostOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedPinDplus;
    int32_t deprecatedPinDplus;
    bool has_mapping;
    KeyboardMapping mapping;
    bool has_deprecatedPin5V;
    int32_t deprecatedPin5V;
    bool has_mouseLeft;
    uint32_t mouseLeft;
    bool has_mouseMiddle;
    uint32_t mouseMiddle;
    bool has_mouseRight;
    uint32_t mouseRight;
} KeyboardHostOptions;

typedef struct _FocusModeOptions {
    bool has_enabled;
    bool enabled;
    bool has_pin;
    int32_t pin;
    bool has_buttonLockMask;
    int32_t buttonLockMask;
    bool has_oledLockEnabled;
    bool oledLockEnabled;
    bool has_rgbLockEnabled;
    bool rgbLockEnabled;
    bool has_buttonLockEnabled;
    bool buttonLockEnabled;
    bool has_macroLockEnabled;
    bool macroLockEnabled;
} FocusModeOptions;

typedef struct _MacroInput {
    bool has_buttonMask;
    uint32_t buttonMask;
    bool has_duration;
    uint32_t duration;
    bool has_waitDuration;
    uint32_t waitDuration;
} MacroInput;

typedef struct _Macro {
    bool has_macroType;
    MacroType macroType;
    bool has_macroLabel;
    char macroLabel[65];
    pb_size_t macroInputs_count;
    MacroInput macroInputs[30];
    bool has_enabled;
    bool enabled;
    bool has_useMacroTriggerButton;
    bool useMacroTriggerButton;
    bool has_deprecatedMacroTriggerPin;
    int32_t deprecatedMacroTriggerPin;
    bool has_macroTriggerButton;
    uint32_t macroTriggerButton;
    bool has_exclusive;
    bool exclusive;
    bool has_interruptible;
    bool interruptible;
    bool has_showFrames;
    bool showFrames;
} Macro;

typedef struct _MacroOptions {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedPin;
    int32_t deprecatedPin;
    pb_size_t macroList_count;
    Macro macroList[6];
    bool has_macroBoardLedEnabled;
    bool macroBoardLedEnabled;
} MacroOptions;

typedef struct _InputHistoryOptions {
    bool has_enabled;
    bool enabled;
    bool has_length;
    uint32_t length;
    bool has_col;
    uint32_t col;
    bool has_row;
    uint32_t row;
} InputHistoryOptions;

typedef struct _RotaryPinOptions {
    bool has_enabled;
    bool enabled;
    bool has_pinA;
    int32_t pinA;
    bool has_pinB;
    int32_t pinB;
    bool has_mode;
    RotaryEncoderPinMode mode;
    bool has_pulsesPerRevolution;
    uint32_t pulsesPerRevolution;
    bool has_resetAfter;
    uint32_t resetAfter;
    bool has_allowWrapAround;
    bool allowWrapAround;
    bool has_multiplier;
    float multiplier;
} RotaryPinOptions;

typedef struct _RotaryOptions {
    bool has_enabled;
    bool enabled;
    bool has_encoderOne;
    RotaryPinOptions encoderOne;
    bool has_encoderTwo;
    RotaryPinOptions encoderTwo;
} RotaryOptions;

typedef struct _PCF8575Options {
    bool has_enabled;
    bool enabled;
    bool has_deprecatedI2cBlock;
    int32_t deprecatedI2cBlock;
    pb_size_t pins_count;
    GpioMappingInfo pins[16];
} PCF8575Options;

typedef struct _DRV8833RumbleOptions {
    bool has_enabled;
    bool enabled;
    bool has_leftMotorPin;
    int32_t leftMotorPin;
    bool has_rightMotorPin;
    int32_t rightMotorPin;
    bool has_motorSleepPin;
    int32_t motorSleepPin;
    bool has_pwmFrequency;
    uint32_t pwmFrequency;
    bool has_dutyMin;
    float dutyMin;
    bool has_dutyMax;
    float dutyMax;
} DRV8833RumbleOptions;

typedef struct _ReactiveLEDInfo {
    bool has_pin;
    int32_t pin;
    bool has_action;
    GpioAction action;
    bool has_modeDown;
    ReactiveLEDMode modeDown;
    bool has_modeUp;
    ReactiveLEDMode modeUp;
} ReactiveLEDInfo;

typedef struct _ReactiveLEDOptions {
    bool has_enabled;
    bool enabled;
    pb_size_t leds_count;
    ReactiveLEDInfo leds[10];
} ReactiveLEDOptions;

typedef struct _AddonOptions {
    bool has_bootselButtonOptions;
    BootselButtonOptions bootselButtonOptions;
    bool has_onBoardLedOptions;
    OnBoardLedOptions onBoardLedOptions;
    bool has_analogOptions;
    AnalogOptions analogOptions;
    bool has_turboOptions;
    TurboOptions turboOptions;
    bool has_deprecatedSliderOptions;
    SliderOptions deprecatedSliderOptions;
    bool has_reverseOptions;
    ReverseOptions reverseOptions;
    bool has_analogADS1219Options;
    AnalogADS1219Options analogADS1219Options;
    bool has_dualDirectionalOptions;
    DualDirectionalOptions dualDirectionalOptions;
    bool has_buzzerOptions;
    BuzzerOptions buzzerOptions;
    bool has_deprecatedExtraButtonOptions;
    ExtraButtonOptions deprecatedExtraButtonOptions;
    bool has_playerNumberOptions;
    PlayerNumberOptions playerNumberOptions;
    bool has_ps4Options;
    PS4Options ps4Options;
    bool has_wiiOptions;
    WiiOptions wiiOptions;
    bool has_socdSliderOptions;
    SOCDSliderOptions socdSliderOptions;
    bool has_snesOptions;
    SNESOptions snesOptions;
    bool has_focusModeOptions;
    FocusModeOptions focusModeOptions;
    bool has_keyboardHostOptions;
    KeyboardHostOptions keyboardHostOptions;
    bool has_tiltOptions;
    TiltOptions tiltOptions;
    bool has_psPassthroughOptions;
    PSPassthroughOptions psPassthroughOptions;
    bool has_macroOptions;
    MacroOptions macroOptions;
    bool has_inputHistoryOptions;
    InputHistoryOptions inputHistoryOptions;
    bool has_xbonePassthroughOptions;
    XBOnePassthroughOptions xbonePassthroughOptions;
    bool has_analogADS1256Options;
    AnalogADS1256Options analogADS1256Options;
    bool has_rotaryOptions;
    RotaryOptions rotaryOptions;
    bool has_pcf8575Options;
    PCF8575Options pcf8575Options;
    bool has_drv8833RumbleOptions;
    DRV8833RumbleOptions drv8833RumbleOptions;
    bool has_reactiveLEDOptions;
    ReactiveLEDOptions reactiveLEDOptions;
} AddonOptions;

typedef struct _MigrationHistory {
    bool has_hotkeysMigrated;
    bool hotkeysMigrated;
    bool has_gpioMappingsMigrated;
    bool gpioMappingsMigrated;
    bool has_buttonProfilesMigrated;
    bool buttonProfilesMigrated;
    bool has_profileEnabledFlagsMigrated;
    bool profileEnabledFlagsMigrated;
} MigrationHistory;

typedef struct _Config {
    bool has_boardVersion;
    char boardVersion[32];
    bool has_gamepadOptions;
    GamepadOptions gamepadOptions;
    bool has_hotkeyOptions;
    HotkeyOptions hotkeyOptions;
    bool has_deprecatedPinMappings;
    PinMappings deprecatedPinMappings;
    bool has_keyboardMapping;
    KeyboardMapping keyboardMapping;
    bool has_displayOptions;
    DisplayOptions displayOptions;
    bool has_ledOptions;
    LEDOptions ledOptions;
    bool has_animationOptions;
    AnimationOptions_Proto animationOptions;
    bool has_addonOptions;
    AddonOptions addonOptions;
    bool has_forcedSetupOptions;
    ForcedSetupOptions forcedSetupOptions;
    bool has_profileOptions;
    ProfileOptions profileOptions;
    bool has_boardConfig;
    char boardConfig[64];
    bool has_gpioMappings;
    GpioMappings gpioMappings;
    bool has_migrations;
    MigrationHistory migrations;
    bool has_peripheralOptions;
    PeripheralOptions peripheralOptions;
    bool has_CSmode;
    uint32_t CSmode;
} Config;


#ifdef __cplusplus
extern "C" {
#endif

/* Defines to allow user code to refer to enum type of a specific field */
#define GamepadOptions_inputMode_ENUMTYPE InputMode
#define GamepadOptions_dpadMode_ENUMTYPE DpadMode
#define GamepadOptions_socdMode_ENUMTYPE SOCDMode
#define GamepadOptions_ps4ControllerType_ENUMTYPE PS4ControllerType
#define GamepadOptions_ps4AuthType_ENUMTYPE InputModeAuthType
#define GamepadOptions_ps5AuthType_ENUMTYPE InputModeAuthType
#define GamepadOptions_xinputAuthType_ENUMTYPE InputModeAuthType
#define GamepadOptions_ps4ControllerIDMode_ENUMTYPE PS4ControllerIDMode
#define HotkeyEntry_action_ENUMTYPE GamepadHotkey
#define ForcedSetupOptions_mode_ENUMTYPE ForcedSetupMode
#define ButtonLayoutParamsLeft_layout_ENUMTYPE ButtonLayout
#define ButtonLayoutParamsRight_layout_ENUMTYPE ButtonLayoutRight
#define GpioMappingInfo_action_ENUMTYPE GpioAction
#define GpioMappingInfo_direction_ENUMTYPE GpioDirection
#define DisplayOptions_buttonLayout_ENUMTYPE ButtonLayout
#define DisplayOptions_buttonLayoutRight_ENUMTYPE ButtonLayoutRight
#define DisplayOptions_splashMode_ENUMTYPE SplashMode
#define DisplayOptions_splashChoice_ENUMTYPE SplashChoice
#define LEDOptions_ledFormat_ENUMTYPE LEDFormat_Proto
#define LEDOptions_ledLayout_ENUMTYPE ButtonLayout
#define LEDOptions_pledType_ENUMTYPE PLEDType
#define OnBoardLedOptions_mode_ENUMTYPE OnBoardLedMode
#define AnalogOptions_analogAdc1Mode_ENUMTYPE DpadMode
#define AnalogOptions_analogAdc2Mode_ENUMTYPE DpadMode
#define AnalogOptions_analogAdc1Invert_ENUMTYPE InvertMode
#define AnalogOptions_analogAdc2Invert_ENUMTYPE InvertMode
#define TurboOptions_shmupMixMode_ENUMTYPE ShmupMixMode
#define SliderOptions_deprecatedModeOne_ENUMTYPE DpadMode
#define SliderOptions_deprecatedModeTwo_ENUMTYPE DpadMode
#define SliderOptions_deprecatedModeDefault_ENUMTYPE DpadMode
#define SOCDSliderOptions_modeDefault_ENUMTYPE SOCDMode
#define SOCDSliderOptions_deprecatedModeOne_ENUMTYPE SOCDMode
#define SOCDSliderOptions_deprecatedModeTwo_ENUMTYPE SOCDMode
#define DualDirectionalOptions_dpadMode_ENUMTYPE DpadMode
#define DualDirectionalOptions_combineMode_ENUMTYPE DualDirectionalCombinationMode
#define TiltOptions_tiltSOCDMode_ENUMTYPE SOCDMode
#define Macro_macroType_ENUMTYPE MacroType
#define RotaryPinOptions_mode_ENUMTYPE RotaryEncoderPinMode
#define ReactiveLEDInfo_action_ENUMTYPE GpioAction
#define ReactiveLEDInfo_modeDown_ENUMTYPE ReactiveLEDMode
#define ReactiveLEDInfo_modeUp_ENUMTYPE ReactiveLEDMode

/* Initializer values for message structs */
#define GamepadOptions_init_default              {false, _InputMode_MIN, false, _DpadMode_MIN, false, _SOCDMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _PS4ControllerType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _InputModeAuthType_MIN, false, _InputModeAuthType_MIN, false, _InputModeAuthType_MIN, false, _PS4ControllerIDMode_MIN}
#define KeyboardMapping_init_default             {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define HotkeyEntry_init_default                 {false, 0, false, _GamepadHotkey_MIN, false, 0, false, 0}
#define HotkeyOptions_init_default               {false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default, false, HotkeyEntry_init_default}
#define PeripheralOptions_init_default           {false, PeripheralOptions_I2COptions_init_default, false, PeripheralOptions_I2COptions_init_default, false, PeripheralOptions_SPIOptions_init_default, false, PeripheralOptions_SPIOptions_init_default, false, PeripheralOptions_USBOptions_init_default}
#define PeripheralOptions_I2COptions_init_default {false, 0, false, 0, false, 0, false, 0}
#define PeripheralOptions_SPIOptions_init_default {false, 0, false, 0, false, 0, false, 0, false, 0}
#define PeripheralOptions_USBOptions_init_default {false, 0, false, 0, false, 0, false, 0}
#define ForcedSetupOptions_init_default          {false, _ForcedSetupMode_MIN}
#define ButtonLayoutParamsCommon_init_default    {false, 0, false, 0, false, 0, false, 0}
#define ButtonLayoutParamsLeft_init_default      {false, _ButtonLayout_MIN, false, ButtonLayoutParamsCommon_init_default}
#define ButtonLayoutParamsRight_init_default     {false, _ButtonLayoutRight_MIN, false, ButtonLayoutParamsCommon_init_default}
#define ButtonLayoutCustomOptions_init_default   {false, ButtonLayoutParamsLeft_init_default, false, ButtonLayoutParamsRight_init_default}
#define PinMappings_init_default                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define GpioMappingInfo_init_default             {false, _GpioAction_MIN, false, _GpioDirection_MIN, false, 0, false, 0}
#define GpioMappings_init_default                {0, {GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default}, false, "", false, false}
#define AlternativePinMappings_init_default      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ProfileOptions_init_default              {0, {AlternativePinMappings_init_default, AlternativePinMappings_init_default, AlternativePinMappings_init_default}, 0, {GpioMappings_init_default, GpioMappings_init_default, GpioMappings_init_default}}
#define DisplayOptions_init_default              {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _ButtonLayout_MIN, false, _ButtonLayoutRight_MIN, false, ButtonLayoutCustomOptions_init_default, false, _SplashMode_MIN, false, _SplashChoice_MIN, false, 0, false, {0, {0}}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define LEDOptions_init_default                  {false, 0, false, _LEDFormat_Proto_MIN, false, _ButtonLayout_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _PLEDType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define AnimationOptions_Proto_init_default      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define BootselButtonOptions_init_default        {false, 0, false, 0}
#define OnBoardLedOptions_init_default           {false, _OnBoardLedMode_MIN, false, 0}
#define AnalogOptions_init_default               {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, _DpadMode_MIN, false, _InvertMode_MIN, false, _InvertMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0}
#define TurboOptions_init_default                {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _ShmupMixMode_MIN}
#define SliderOptions_init_default               {false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, _DpadMode_MIN, false, _DpadMode_MIN}
#define SOCDSliderOptions_init_default           {false, 0, false, 0, false, 0, false, _SOCDMode_MIN, false, _SOCDMode_MIN, false, _SOCDMode_MIN}
#define ReverseOptions_init_default              {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define AnalogADS1219Options_init_default        {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define AnalogADS1256Options_init_default        {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define DualDirectionalOptions_init_default      {false, 0, false, 0, false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, _DualDirectionalCombinationMode_MIN, false, 0}
#define TiltOptions_init_default                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _SOCDMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define BuzzerOptions_init_default               {false, 0, false, 0, false, 0, false, 0}
#define ExtraButtonOptions_init_default          {false, 0, false, 0, false, 0}
#define PlayerNumberOptions_init_default         {false, 0, false, 0}
#define PS4Options_init_default                  {false, 0, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define PSPassthroughOptions_init_default        {false, 0, false, 0, false, 0}
#define XBOnePassthroughOptions_init_default     {false, 0}
#define WiiOptions_init_default                  {false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_ControllerOptions_init_default}
#define WiiOptions_AnalogAxis_init_default       {false, 0, false, 0, false, 0}
#define WiiOptions_StickOptions_init_default     {false, WiiOptions_AnalogAxis_init_default, false, WiiOptions_AnalogAxis_init_default}
#define WiiOptions_NunchukOptions_init_default   {false, 0, false, 0, false, WiiOptions_StickOptions_init_default}
#define WiiOptions_ClassicOptions_init_default   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_default, false, WiiOptions_StickOptions_init_default, false, WiiOptions_AnalogAxis_init_default, false, WiiOptions_AnalogAxis_init_default}
#define WiiOptions_TaikoOptions_init_default     {false, 0, false, 0, false, 0, false, 0}
#define WiiOptions_GuitarOptions_init_default    {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_default, false, WiiOptions_AnalogAxis_init_default}
#define WiiOptions_DrumOptions_init_default      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_default}
#define WiiOptions_TurntableOptions_init_default {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_default, false, WiiOptions_AnalogAxis_init_default, false, WiiOptions_AnalogAxis_init_default, false, WiiOptions_AnalogAxis_init_default, false, WiiOptions_AnalogAxis_init_default}
#define WiiOptions_ControllerOptions_init_default {false, WiiOptions_NunchukOptions_init_default, false, WiiOptions_ClassicOptions_init_default, false, WiiOptions_TaikoOptions_init_default, false, WiiOptions_GuitarOptions_init_default, false, WiiOptions_DrumOptions_init_default, false, WiiOptions_TurntableOptions_init_default}
#define SNESOptions_init_default                 {false, 0, false, 0, false, 0, false, 0}
#define KeyboardHostOptions_init_default         {false, 0, false, 0, false, KeyboardMapping_init_default, false, 0, false, 0, false, 0, false, 0}
#define FocusModeOptions_init_default            {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MacroInput_init_default                  {false, 0, false, 0, false, 0u}
#define Macro_init_default                       {false, _MacroType_MIN, false, "", 0, {MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default, MacroInput_init_default}, false, 0, false, 0, false, 0, false, 0, false, true, false, true, false, false}
#define MacroOptions_init_default                {false, 0, false, 0, 0, {Macro_init_default, Macro_init_default, Macro_init_default, Macro_init_default, Macro_init_default, Macro_init_default}, false, 0}
#define InputHistoryOptions_init_default         {false, 0, false, 0, false, 0, false, 0}
#define RotaryPinOptions_init_default            {false, 0, false, 0, false, 0, false, _RotaryEncoderPinMode_MIN, false, 0, false, 0, false, 0, false, 0}
#define RotaryOptions_init_default               {false, 0, false, RotaryPinOptions_init_default, false, RotaryPinOptions_init_default}
#define PCF8575Options_init_default              {false, 0, false, 0, 0, {GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default, GpioMappingInfo_init_default}}
#define DRV8833RumbleOptions_init_default        {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ReactiveLEDInfo_init_default             {false, 0, false, _GpioAction_MIN, false, _ReactiveLEDMode_MIN, false, _ReactiveLEDMode_MIN}
#define ReactiveLEDOptions_init_default          {false, 0, 0, {ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default, ReactiveLEDInfo_init_default}}
#define AddonOptions_init_default                {false, BootselButtonOptions_init_default, false, OnBoardLedOptions_init_default, false, AnalogOptions_init_default, false, TurboOptions_init_default, false, SliderOptions_init_default, false, ReverseOptions_init_default, false, AnalogADS1219Options_init_default, false, DualDirectionalOptions_init_default, false, BuzzerOptions_init_default, false, ExtraButtonOptions_init_default, false, PlayerNumberOptions_init_default, false, PS4Options_init_default, false, WiiOptions_init_default, false, SOCDSliderOptions_init_default, false, SNESOptions_init_default, false, FocusModeOptions_init_default, false, KeyboardHostOptions_init_default, false, TiltOptions_init_default, false, PSPassthroughOptions_init_default, false, MacroOptions_init_default, false, InputHistoryOptions_init_default, false, XBOnePassthroughOptions_init_default, false, AnalogADS1256Options_init_default, false, RotaryOptions_init_default, false, PCF8575Options_init_default, false, DRV8833RumbleOptions_init_default, false, ReactiveLEDOptions_init_default}
#define MigrationHistory_init_default            {false, false, false, false, false, false, false, false}
#define Config_init_default                      {false, "", false, GamepadOptions_init_default, false, HotkeyOptions_init_default, false, PinMappings_init_default, false, KeyboardMapping_init_default, false, DisplayOptions_init_default, false, LEDOptions_init_default, false, AnimationOptions_Proto_init_default, false, AddonOptions_init_default, false, ForcedSetupOptions_init_default, false, ProfileOptions_init_default, false, "", false, GpioMappings_init_default, false, MigrationHistory_init_default, false, PeripheralOptions_init_default, false, 0}
#define GamepadOptions_init_zero                 {false, _InputMode_MIN, false, _DpadMode_MIN, false, _SOCDMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _PS4ControllerType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _InputModeAuthType_MIN, false, _InputModeAuthType_MIN, false, _InputModeAuthType_MIN, false, _PS4ControllerIDMode_MIN}
#define KeyboardMapping_init_zero                {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define HotkeyEntry_init_zero                    {false, 0, false, _GamepadHotkey_MIN, false, 0, false, 0}
#define HotkeyOptions_init_zero                  {false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero, false, HotkeyEntry_init_zero}
#define PeripheralOptions_init_zero              {false, PeripheralOptions_I2COptions_init_zero, false, PeripheralOptions_I2COptions_init_zero, false, PeripheralOptions_SPIOptions_init_zero, false, PeripheralOptions_SPIOptions_init_zero, false, PeripheralOptions_USBOptions_init_zero}
#define PeripheralOptions_I2COptions_init_zero   {false, 0, false, 0, false, 0, false, 0}
#define PeripheralOptions_SPIOptions_init_zero   {false, 0, false, 0, false, 0, false, 0, false, 0}
#define PeripheralOptions_USBOptions_init_zero   {false, 0, false, 0, false, 0, false, 0}
#define ForcedSetupOptions_init_zero             {false, _ForcedSetupMode_MIN}
#define ButtonLayoutParamsCommon_init_zero       {false, 0, false, 0, false, 0, false, 0}
#define ButtonLayoutParamsLeft_init_zero         {false, _ButtonLayout_MIN, false, ButtonLayoutParamsCommon_init_zero}
#define ButtonLayoutParamsRight_init_zero        {false, _ButtonLayoutRight_MIN, false, ButtonLayoutParamsCommon_init_zero}
#define ButtonLayoutCustomOptions_init_zero      {false, ButtonLayoutParamsLeft_init_zero, false, ButtonLayoutParamsRight_init_zero}
#define PinMappings_init_zero                    {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define GpioMappingInfo_init_zero                {false, _GpioAction_MIN, false, _GpioDirection_MIN, false, 0, false, 0}
#define GpioMappings_init_zero                   {0, {GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero}, false, "", false, 0}
#define AlternativePinMappings_init_zero         {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ProfileOptions_init_zero                 {0, {AlternativePinMappings_init_zero, AlternativePinMappings_init_zero, AlternativePinMappings_init_zero}, 0, {GpioMappings_init_zero, GpioMappings_init_zero, GpioMappings_init_zero}}
#define DisplayOptions_init_zero                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _ButtonLayout_MIN, false, _ButtonLayoutRight_MIN, false, ButtonLayoutCustomOptions_init_zero, false, _SplashMode_MIN, false, _SplashChoice_MIN, false, 0, false, {0, {0}}, false, 0, false, 0, false, 0, false, 0, false, 0}
#define LEDOptions_init_zero                     {false, 0, false, _LEDFormat_Proto_MIN, false, _ButtonLayout_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _PLEDType_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define AnimationOptions_Proto_init_zero         {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define BootselButtonOptions_init_zero           {false, 0, false, 0}
#define OnBoardLedOptions_init_zero              {false, _OnBoardLedMode_MIN, false, 0}
#define AnalogOptions_init_zero                  {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, _DpadMode_MIN, false, _InvertMode_MIN, false, _InvertMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0}
#define TurboOptions_init_zero                   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _ShmupMixMode_MIN}
#define SliderOptions_init_zero                  {false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, _DpadMode_MIN, false, _DpadMode_MIN}
#define SOCDSliderOptions_init_zero              {false, 0, false, 0, false, 0, false, _SOCDMode_MIN, false, _SOCDMode_MIN, false, _SOCDMode_MIN}
#define ReverseOptions_init_zero                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define AnalogADS1219Options_init_zero           {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define AnalogADS1256Options_init_zero           {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define DualDirectionalOptions_init_zero         {false, 0, false, 0, false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, _DualDirectionalCombinationMode_MIN, false, 0}
#define TiltOptions_init_zero                    {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _SOCDMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define BuzzerOptions_init_zero                  {false, 0, false, 0, false, 0, false, 0}
#define ExtraButtonOptions_init_zero             {false, 0, false, 0, false, 0}
#define PlayerNumberOptions_init_zero            {false, 0, false, 0}
#define PS4Options_init_zero                     {false, 0, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}}
#define PSPassthroughOptions_init_zero           {false, 0, false, 0, false, 0}
#define XBOnePassthroughOptions_init_zero        {false, 0}
#define WiiOptions_init_zero                     {false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_ControllerOptions_init_zero}
#define WiiOptions_AnalogAxis_init_zero          {false, 0, false, 0, false, 0}
#define WiiOptions_StickOptions_init_zero        {false, WiiOptions_AnalogAxis_init_zero, false, WiiOptions_AnalogAxis_init_zero}
#define WiiOptions_NunchukOptions_init_zero      {false, 0, false, 0, false, WiiOptions_StickOptions_init_zero}
#define WiiOptions_ClassicOptions_init_zero      {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_zero, false, WiiOptions_StickOptions_init_zero, false, WiiOptions_AnalogAxis_init_zero, false, WiiOptions_AnalogAxis_init_zero}
#define WiiOptions_TaikoOptions_init_zero        {false, 0, false, 0, false, 0, false, 0}
#define WiiOptions_GuitarOptions_init_zero       {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_zero, false, WiiOptions_AnalogAxis_init_zero}
#define WiiOptions_DrumOptions_init_zero         {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_zero}
#define WiiOptions_TurntableOptions_init_zero    {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, WiiOptions_StickOptions_init_zero, false, WiiOptions_AnalogAxis_init_zero, false, WiiOptions_AnalogAxis_init_zero, false, WiiOptions_AnalogAxis_init_zero, false, WiiOptions_AnalogAxis_init_zero}
#define WiiOptions_ControllerOptions_init_zero   {false, WiiOptions_NunchukOptions_init_zero, false, WiiOptions_ClassicOptions_init_zero, false, WiiOptions_TaikoOptions_init_zero, false, WiiOptions_GuitarOptions_init_zero, false, WiiOptions_DrumOptions_init_zero, false, WiiOptions_TurntableOptions_init_zero}
#define SNESOptions_init_zero                    {false, 0, false, 0, false, 0, false, 0}
#define KeyboardHostOptions_init_zero            {false, 0, false, 0, false, KeyboardMapping_init_zero, false, 0, false, 0, false, 0, false, 0}
#define FocusModeOptions_init_zero               {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MacroInput_init_zero                     {false, 0, false, 0, false, 0}
#define Macro_init_zero                          {false, _MacroType_MIN, false, "", 0, {MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero, MacroInput_init_zero}, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define MacroOptions_init_zero                   {false, 0, false, 0, 0, {Macro_init_zero, Macro_init_zero, Macro_init_zero, Macro_init_zero, Macro_init_zero, Macro_init_zero}, false, 0}
#define InputHistoryOptions_init_zero            {false, 0, false, 0, false, 0, false, 0}
#define RotaryPinOptions_init_zero               {false, 0, false, 0, false, 0, false, _RotaryEncoderPinMode_MIN, false, 0, false, 0, false, 0, false, 0}
#define RotaryOptions_init_zero                  {false, 0, false, RotaryPinOptions_init_zero, false, RotaryPinOptions_init_zero}
#define PCF8575Options_init_zero                 {false, 0, false, 0, 0, {GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero, GpioMappingInfo_init_zero}}
#define DRV8833RumbleOptions_init_zero           {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define ReactiveLEDInfo_init_zero                {false, 0, false, _GpioAction_MIN, false, _ReactiveLEDMode_MIN, false, _ReactiveLEDMode_MIN}
#define ReactiveLEDOptions_init_zero             {false, 0, 0, {ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero, ReactiveLEDInfo_init_zero}}
#define AddonOptions_init_zero                   {false, BootselButtonOptions_init_zero, false, OnBoardLedOptions_init_zero, false, AnalogOptions_init_zero, false, TurboOptions_init_zero, false, SliderOptions_init_zero, false, ReverseOptions_init_zero, false, AnalogADS1219Options_init_zero, false, DualDirectionalOptions_init_zero, false, BuzzerOptions_init_zero, false, ExtraButtonOptions_init_zero, false, PlayerNumberOptions_init_zero, false, PS4Options_init_zero, false, WiiOptions_init_zero, false, SOCDSliderOptions_init_zero, false, SNESOptions_init_zero, false, FocusModeOptions_init_zero, false, KeyboardHostOptions_init_zero, false, TiltOptions_init_zero, false, PSPassthroughOptions_init_zero, false, MacroOptions_init_zero, false, InputHistoryOptions_init_zero, false, XBOnePassthroughOptions_init_zero, false, AnalogADS1256Options_init_zero, false, RotaryOptions_init_zero, false, PCF8575Options_init_zero, false, DRV8833RumbleOptions_init_zero, false, ReactiveLEDOptions_init_zero}
#define MigrationHistory_init_zero               {false, 0, false, 0, false, 0, false, 0}
#define Config_init_zero                         {false, "", false, GamepadOptions_init_zero, false, HotkeyOptions_init_zero, false, PinMappings_init_zero, false, KeyboardMapping_init_zero, false, DisplayOptions_init_zero, false, LEDOptions_init_zero, false, AnimationOptions_Proto_init_zero, false, AddonOptions_init_zero, false, ForcedSetupOptions_init_zero, false, ProfileOptions_init_zero, false, "", false, GpioMappings_init_zero, false, MigrationHistory_init_zero, false, PeripheralOptions_init_zero, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define GamepadOptions_inputMode_tag             1
#define GamepadOptions_dpadMode_tag              2
#define GamepadOptions_socdMode_tag              3
#define GamepadOptions_invertXAxis_tag           4
#define GamepadOptions_invertYAxis_tag           5
#define GamepadOptions_switchTpShareForDs4_tag   6
#define GamepadOptions_lockHotkeys_tag           7
#define GamepadOptions_fourWayMode_tag           8
#define GamepadOptions_profileNumber_tag         9
#define GamepadOptions_ps4ControllerType_tag     10
#define GamepadOptions_debounceDelay_tag         11
#define GamepadOptions_inputModeB1_tag           12
#define GamepadOptions_inputModeB2_tag           13
#define GamepadOptions_inputModeB3_tag           14
#define GamepadOptions_inputModeB4_tag           15
#define GamepadOptions_inputModeL1_tag           16
#define GamepadOptions_inputModeL2_tag           17
#define GamepadOptions_inputModeR1_tag           18
#define GamepadOptions_inputModeR2_tag           19
#define GamepadOptions_ps4ReportHack_tag         20
#define GamepadOptions_ps4AuthType_tag           21
#define GamepadOptions_ps5AuthType_tag           22
#define GamepadOptions_xinputAuthType_tag        23
#define GamepadOptions_ps4ControllerIDMode_tag   24
#define KeyboardMapping_keyDpadUp_tag            1
#define KeyboardMapping_keyDpadDown_tag          2
#define KeyboardMapping_keyDpadLeft_tag          3
#define KeyboardMapping_keyDpadRight_tag         4
#define KeyboardMapping_keyButtonB1_tag          5
#define KeyboardMapping_keyButtonB2_tag          6
#define KeyboardMapping_keyButtonB3_tag          7
#define KeyboardMapping_keyButtonB4_tag          8
#define KeyboardMapping_keyButtonL1_tag          9
#define KeyboardMapping_keyButtonR1_tag          10
#define KeyboardMapping_keyButtonL2_tag          11
#define KeyboardMapping_keyButtonR2_tag          12
#define KeyboardMapping_keyButtonS1_tag          13
#define KeyboardMapping_keyButtonS2_tag          14
#define KeyboardMapping_keyButtonL3_tag          15
#define KeyboardMapping_keyButtonR3_tag          16
#define KeyboardMapping_keyButtonA1_tag          17
#define KeyboardMapping_keyButtonA2_tag          18
#define KeyboardMapping_keyButtonA3_tag          19
#define KeyboardMapping_keyButtonA4_tag          20
#define KeyboardMapping_keyButtonE1_tag          21
#define KeyboardMapping_keyButtonE2_tag          22
#define KeyboardMapping_keyButtonE3_tag          23
#define KeyboardMapping_keyButtonE4_tag          24
#define KeyboardMapping_keyButtonE5_tag          25
#define KeyboardMapping_keyButtonE6_tag          26
#define KeyboardMapping_keyButtonE7_tag          27
#define KeyboardMapping_keyButtonE8_tag          28
#define KeyboardMapping_keyButtonE9_tag          29
#define KeyboardMapping_keyButtonE10_tag         30
#define KeyboardMapping_keyButtonE11_tag         31
#define KeyboardMapping_keyButtonE12_tag         32
#define HotkeyEntry_dpadMask_tag                 1
#define HotkeyEntry_action_tag                   2
#define HotkeyEntry_buttonsMask_tag              3
#define HotkeyEntry_auxMask_tag                  4
#define HotkeyOptions_hotkey01_tag               1
#define HotkeyOptions_hotkey02_tag               2
#define HotkeyOptions_hotkey03_tag               3
#define HotkeyOptions_hotkey04_tag               4
#define HotkeyOptions_hotkey05_tag               5
#define HotkeyOptions_hotkey06_tag               6
#define HotkeyOptions_hotkey07_tag               7
#define HotkeyOptions_hotkey08_tag               8
#define HotkeyOptions_hotkey09_tag               9
#define HotkeyOptions_hotkey10_tag               10
#define HotkeyOptions_hotkey11_tag               11
#define HotkeyOptions_hotkey12_tag               12
#define HotkeyOptions_hotkey13_tag               13
#define HotkeyOptions_hotkey14_tag               14
#define HotkeyOptions_hotkey15_tag               15
#define HotkeyOptions_hotkey16_tag               16
#define PeripheralOptions_I2COptions_enabled_tag 1
#define PeripheralOptions_I2COptions_sda_tag     2
#define PeripheralOptions_I2COptions_scl_tag     3
#define PeripheralOptions_I2COptions_speed_tag   4
#define PeripheralOptions_SPIOptions_enabled_tag 1
#define PeripheralOptions_SPIOptions_rx_tag      2
#define PeripheralOptions_SPIOptions_cs_tag      3
#define PeripheralOptions_SPIOptions_sck_tag     4
#define PeripheralOptions_SPIOptions_tx_tag      5
#define PeripheralOptions_USBOptions_enabled_tag 1
#define PeripheralOptions_USBOptions_dp_tag      2
#define PeripheralOptions_USBOptions_enable5v_tag 3
#define PeripheralOptions_USBOptions_order_tag   4
#define PeripheralOptions_blockI2C0_tag          1
#define PeripheralOptions_blockI2C1_tag          2
#define PeripheralOptions_blockSPI0_tag          3
#define PeripheralOptions_blockSPI1_tag          4
#define PeripheralOptions_blockUSB0_tag          5
#define ForcedSetupOptions_mode_tag              1
#define ButtonLayoutParamsCommon_startX_tag      1
#define ButtonLayoutParamsCommon_startY_tag      2
#define ButtonLayoutParamsCommon_buttonRadius_tag 3
#define ButtonLayoutParamsCommon_buttonPadding_tag 4
#define ButtonLayoutParamsLeft_layout_tag        1
#define ButtonLayoutParamsLeft_common_tag        2
#define ButtonLayoutParamsRight_layout_tag       1
#define ButtonLayoutParamsRight_common_tag       2
#define ButtonLayoutCustomOptions_paramsLeft_tag 1
#define ButtonLayoutCustomOptions_paramsRight_tag 2
#define PinMappings_pinDpadUp_tag                1
#define PinMappings_pinDpadDown_tag              2
#define PinMappings_pinDpadLeft_tag              3
#define PinMappings_pinDpadRight_tag             4
#define PinMappings_pinButtonB1_tag              5
#define PinMappings_pinButtonB2_tag              6
#define PinMappings_pinButtonB3_tag              7
#define PinMappings_pinButtonB4_tag              8
#define PinMappings_pinButtonL1_tag              9
#define PinMappings_pinButtonR1_tag              10
#define PinMappings_pinButtonL2_tag              11
#define PinMappings_pinButtonR2_tag              12
#define PinMappings_pinButtonS1_tag              13
#define PinMappings_pinButtonS2_tag              14
#define PinMappings_pinButtonL3_tag              15
#define PinMappings_pinButtonR3_tag              16
#define PinMappings_pinButtonA1_tag              17
#define PinMappings_pinButtonA2_tag              18
#define PinMappings_pinButtonFn_tag              19
#define GpioMappingInfo_action_tag               1
#define GpioMappingInfo_direction_tag            2
#define GpioMappingInfo_customDpadMask_tag       3
#define GpioMappingInfo_customButtonMask_tag     4
#define GpioMappings_pins_tag                    1
#define GpioMappings_profileLabel_tag            2
#define GpioMappings_enabled_tag                 3
#define AlternativePinMappings_pinButtonB1_tag   1
#define AlternativePinMappings_pinButtonB2_tag   2
#define AlternativePinMappings_pinButtonB3_tag   3
#define AlternativePinMappings_pinButtonB4_tag   4
#define AlternativePinMappings_pinButtonL1_tag   5
#define AlternativePinMappings_pinButtonR1_tag   6
#define AlternativePinMappings_pinButtonL2_tag   7
#define AlternativePinMappings_pinButtonR2_tag   8
#define AlternativePinMappings_pinDpadUp_tag     9
#define AlternativePinMappings_pinDpadDown_tag   10
#define AlternativePinMappings_pinDpadLeft_tag   11
#define AlternativePinMappings_pinDpadRight_tag  12
#define ProfileOptions_deprecatedAlternativePinMappings_tag 1
#define ProfileOptions_gpioMappingsSets_tag      2
#define DisplayOptions_enabled_tag               1
#define DisplayOptions_deprecatedI2cBlock_tag    2
#define DisplayOptions_deprecatedI2cSDAPin_tag   3
#define DisplayOptions_deprecatedI2cSCLPin_tag   4
#define DisplayOptions_deprecatedI2cAddress_tag  5
#define DisplayOptions_deprecatedI2cSpeed_tag    6
#define DisplayOptions_buttonLayout_tag          7
#define DisplayOptions_buttonLayoutRight_tag     8
#define DisplayOptions_buttonLayoutCustomOptions_tag 9
#define DisplayOptions_splashMode_tag            10
#define DisplayOptions_splashChoice_tag          11
#define DisplayOptions_splashDuration_tag        12
#define DisplayOptions_splashImage_tag           13
#define DisplayOptions_size_tag                  14
#define DisplayOptions_flip_tag                  15
#define DisplayOptions_invert_tag                16
#define DisplayOptions_displaySaverTimeout_tag   17
#define DisplayOptions_turnOffWhenSuspended_tag  18
#define LEDOptions_dataPin_tag                   1
#define LEDOptions_ledFormat_tag                 2
#define LEDOptions_ledLayout_tag                 3
#define LEDOptions_ledsPerButton_tag             4
#define LEDOptions_brightnessMaximum_tag         5
#define LEDOptions_brightnessSteps_tag           6
#define LEDOptions_indexUp_tag                   7
#define LEDOptions_indexDown_tag                 8
#define LEDOptions_indexLeft_tag                 9
#define LEDOptions_indexRight_tag                10
#define LEDOptions_indexB1_tag                   11
#define LEDOptions_indexB2_tag                   12
#define LEDOptions_indexB3_tag                   13
#define LEDOptions_indexB4_tag                   14
#define LEDOptions_indexL1_tag                   15
#define LEDOptions_indexR1_tag                   16
#define LEDOptions_indexL2_tag                   17
#define LEDOptions_indexR2_tag                   18
#define LEDOptions_indexS1_tag                   19
#define LEDOptions_indexS2_tag                   20
#define LEDOptions_indexL3_tag                   21
#define LEDOptions_indexR3_tag                   22
#define LEDOptions_indexA1_tag                   23
#define LEDOptions_indexA2_tag                   24
#define LEDOptions_pledType_tag                  25
#define LEDOptions_pledPin1_tag                  26
#define LEDOptions_pledPin2_tag                  27
#define LEDOptions_pledPin3_tag                  28
#define LEDOptions_pledPin4_tag                  29
#define LEDOptions_pledColor_tag                 30
#define LEDOptions_turnOffWhenSuspended_tag      31
#define LEDOptions_pledIndex1_tag                32
#define LEDOptions_pledIndex2_tag                33
#define LEDOptions_pledIndex3_tag                34
#define LEDOptions_pledIndex4_tag                35
#define AnimationOptions_Proto_baseAnimationIndex_tag 1
#define AnimationOptions_Proto_brightness_tag    2
#define AnimationOptions_Proto_staticColorIndex_tag 3
#define AnimationOptions_Proto_buttonColorIndex_tag 4
#define AnimationOptions_Proto_chaseCycleTime_tag 5
#define AnimationOptions_Proto_rainbowCycleTime_tag 6
#define AnimationOptions_Proto_themeIndex_tag    7
#define AnimationOptions_Proto_hasCustomTheme_tag 8
#define AnimationOptions_Proto_customThemeUp_tag 9
#define AnimationOptions_Proto_customThemeDown_tag 10
#define AnimationOptions_Proto_customThemeLeft_tag 11
#define AnimationOptions_Proto_customThemeRight_tag 12
#define AnimationOptions_Proto_customThemeB1_tag 13
#define AnimationOptions_Proto_customThemeB2_tag 14
#define AnimationOptions_Proto_customThemeB3_tag 15
#define AnimationOptions_Proto_customThemeB4_tag 16
#define AnimationOptions_Proto_customThemeL1_tag 17
#define AnimationOptions_Proto_customThemeR1_tag 18
#define AnimationOptions_Proto_customThemeL2_tag 19
#define AnimationOptions_Proto_customThemeR2_tag 20
#define AnimationOptions_Proto_customThemeS1_tag 21
#define AnimationOptions_Proto_customThemeS2_tag 22
#define AnimationOptions_Proto_customThemeL3_tag 23
#define AnimationOptions_Proto_customThemeR3_tag 24
#define AnimationOptions_Proto_customThemeA1_tag 25
#define AnimationOptions_Proto_customThemeA2_tag 26
#define AnimationOptions_Proto_customThemeUpPressed_tag 27
#define AnimationOptions_Proto_customThemeDownPressed_tag 28
#define AnimationOptions_Proto_customThemeLeftPressed_tag 29
#define AnimationOptions_Proto_customThemeRightPressed_tag 30
#define AnimationOptions_Proto_customThemeB1Pressed_tag 31
#define AnimationOptions_Proto_customThemeB2Pressed_tag 32
#define AnimationOptions_Proto_customThemeB3Pressed_tag 33
#define AnimationOptions_Proto_customThemeB4Pressed_tag 34
#define AnimationOptions_Proto_customThemeL1Pressed_tag 35
#define AnimationOptions_Proto_customThemeR1Pressed_tag 36
#define AnimationOptions_Proto_customThemeL2Pressed_tag 37
#define AnimationOptions_Proto_customThemeR2Pressed_tag 38
#define AnimationOptions_Proto_customThemeS1Pressed_tag 39
#define AnimationOptions_Proto_customThemeS2Pressed_tag 40
#define AnimationOptions_Proto_customThemeL3Pressed_tag 41
#define AnimationOptions_Proto_customThemeR3Pressed_tag 42
#define AnimationOptions_Proto_customThemeA1Pressed_tag 43
#define AnimationOptions_Proto_customThemeA2Pressed_tag 44
#define AnimationOptions_Proto_buttonPressColorCooldownTimeInMs_tag 45
#define BootselButtonOptions_enabled_tag         1
#define BootselButtonOptions_buttonMap_tag       2
#define OnBoardLedOptions_mode_tag               1
#define OnBoardLedOptions_enabled_tag            2
#define AnalogOptions_enabled_tag                1
#define AnalogOptions_analogAdc1PinX_tag         2
#define AnalogOptions_analogAdc1PinY_tag         3
#define AnalogOptions_forced_circularity_tag     4
#define AnalogOptions_inner_deadzone_tag         5
#define AnalogOptions_analogAdc2PinX_tag         6
#define AnalogOptions_analogAdc2PinY_tag         7
#define AnalogOptions_analogAdc1Mode_tag         8
#define AnalogOptions_analogAdc2Mode_tag         9
#define AnalogOptions_analogAdc1Invert_tag       10
#define AnalogOptions_analogAdc2Invert_tag       11
#define AnalogOptions_auto_calibrate_tag         12
#define AnalogOptions_outer_deadzone_tag         13
#define AnalogOptions_analog_smoothing_tag       14
#define AnalogOptions_smoothing_factor_tag       15
#define AnalogOptions_analog_error_tag           16
#define TurboOptions_enabled_tag                 1
#define TurboOptions_deprecatedButtonPin_tag     2
#define TurboOptions_ledPin_tag                  3
#define TurboOptions_shotCount_tag               4
#define TurboOptions_shmupDialPin_tag            5
#define TurboOptions_shmupModeEnabled_tag        6
#define TurboOptions_shmupAlwaysOn1_tag          7
#define TurboOptions_shmupAlwaysOn2_tag          8
#define TurboOptions_shmupAlwaysOn3_tag          9
#define TurboOptions_shmupAlwaysOn4_tag          10
#define TurboOptions_shmupBtn1Pin_tag            11
#define TurboOptions_shmupBtn2Pin_tag            12
#define TurboOptions_shmupBtn3Pin_tag            13
#define TurboOptions_shmupBtn4Pin_tag            14
#define TurboOptions_shmupBtnMask1_tag           15
#define TurboOptions_shmupBtnMask2_tag           16
#define TurboOptions_shmupBtnMask3_tag           17
#define TurboOptions_shmupBtnMask4_tag           18
#define TurboOptions_shmupMixMode_tag            19
#define SliderOptions_enabled_tag                1
#define SliderOptions_deprecatedPinSliderOne_tag 2
#define SliderOptions_deprecatedPinSliderTwo_tag 3
#define SliderOptions_deprecatedModeOne_tag      4
#define SliderOptions_deprecatedModeTwo_tag      5
#define SliderOptions_deprecatedModeDefault_tag  6
#define SOCDSliderOptions_enabled_tag            1
#define SOCDSliderOptions_deprecatedPinOne_tag   2
#define SOCDSliderOptions_deprecatedPinTwo_tag   3
#define SOCDSliderOptions_modeDefault_tag        4
#define SOCDSliderOptions_deprecatedModeOne_tag  5
#define SOCDSliderOptions_deprecatedModeTwo_tag  6
#define ReverseOptions_enabled_tag               1
#define ReverseOptions_buttonPin_tag             2
#define ReverseOptions_ledPin_tag                3
#define ReverseOptions_actionUp_tag              4
#define ReverseOptions_actionDown_tag            5
#define ReverseOptions_actionLeft_tag            6
#define ReverseOptions_actionRight_tag           7
#define AnalogADS1219Options_enabled_tag         1
#define AnalogADS1219Options_deprecatedI2cBlock_tag 2
#define AnalogADS1219Options_deprecatedI2cSDAPin_tag 3
#define AnalogADS1219Options_deprecatedI2cSCLPin_tag 4
#define AnalogADS1219Options_deprecatedI2cAddress_tag 5
#define AnalogADS1219Options_deprecatedI2cSpeed_tag 6
#define AnalogADS1256Options_enabled_tag         1
#define AnalogADS1256Options_spiBlock_tag        2
#define AnalogADS1256Options_csPin_tag           3
#define AnalogADS1256Options_drdyPin_tag         4
#define AnalogADS1256Options_avdd_tag            5
#define AnalogADS1256Options_enableTriggers_tag  6
#define DualDirectionalOptions_enabled_tag       1
#define DualDirectionalOptions_deprecatedUpPin_tag 2
#define DualDirectionalOptions_deprecatedDownPin_tag 3
#define DualDirectionalOptions_deprecatedLeftPin_tag 4
#define DualDirectionalOptions_deprecatedRightPin_tag 5
#define DualDirectionalOptions_dpadMode_tag      6
#define DualDirectionalOptions_combineMode_tag   7
#define DualDirectionalOptions_fourWayMode_tag   8
#define TiltOptions_enabled_tag                  1
#define TiltOptions_tilt1Pin_tag                 2
#define TiltOptions_tilt2Pin_tag                 3
#define TiltOptions_deprecatedTiltFunctionPin_tag 4
#define TiltOptions_tiltLeftAnalogUpPin_tag      5
#define TiltOptions_tiltLeftAnalogDownPin_tag    6
#define TiltOptions_tiltLeftAnalogLeftPin_tag    7
#define TiltOptions_tiltLeftAnalogRightPin_tag   8
#define TiltOptions_tiltRightAnalogUpPin_tag     9
#define TiltOptions_tiltRightAnalogDownPin_tag   10
#define TiltOptions_tiltRightAnalogLeftPin_tag   11
#define TiltOptions_tiltRightAnalogRightPin_tag  12
#define TiltOptions_tiltSOCDMode_tag             13
#define TiltOptions_factorTilt1LeftX_tag         14
#define TiltOptions_factorTilt1LeftY_tag         15
#define TiltOptions_factorTilt1RightX_tag        16
#define TiltOptions_factorTilt1RightY_tag        17
#define TiltOptions_factorTilt2LeftX_tag         18
#define TiltOptions_factorTilt2LeftY_tag         19
#define TiltOptions_factorTilt2RightX_tag        20
#define TiltOptions_factorTilt2RightY_tag        21
#define BuzzerOptions_enabled_tag                1
#define BuzzerOptions_pin_tag                    2
#define BuzzerOptions_volume_tag                 3
#define BuzzerOptions_enablePin_tag              4
#define ExtraButtonOptions_enabled_tag           1
#define ExtraButtonOptions_pin_tag               2
#define ExtraButtonOptions_buttonMap_tag         3
#define PlayerNumberOptions_enabled_tag          1
#define PlayerNumberOptions_number_tag           2
#define PS4Options_enabled_tag                   1
#define PS4Options_serial_tag                    2
#define PS4Options_signature_tag                 3
#define PS4Options_rsaN_tag                      4
#define PS4Options_rsaE_tag                      5
#define PS4Options_rsaD_tag                      6
#define PS4Options_rsaP_tag                      7
#define PS4Options_rsaQ_tag                      8
#define PS4Options_rsaDP_tag                     9
#define PS4Options_rsaDQ_tag                     10
#define PS4Options_rsaQP_tag                     11
#define PS4Options_rsaRN_tag                     12
#define PSPassthroughOptions_enabled_tag         1
#define PSPassthroughOptions_deprecatedPinDplus_tag 2
#define PSPassthroughOptions_deprecatedPin5V_tag 3
#define XBOnePassthroughOptions_enabled_tag      1
#define WiiOptions_AnalogAxis_axisType_tag       1
#define WiiOptions_AnalogAxis_minRange_tag       2
#define WiiOptions_AnalogAxis_maxRange_tag       3
#define WiiOptions_StickOptions_x_tag            1
#define WiiOptions_StickOptions_y_tag            2
#define WiiOptions_NunchukOptions_buttonC_tag    1
#define WiiOptions_NunchukOptions_buttonZ_tag    2
#define WiiOptions_NunchukOptions_stick_tag      3
#define WiiOptions_ClassicOptions_buttonA_tag    1
#define WiiOptions_ClassicOptions_buttonB_tag    2
#define WiiOptions_ClassicOptions_buttonX_tag    3
#define WiiOptions_ClassicOptions_buttonY_tag    4
#define WiiOptions_ClassicOptions_buttonL_tag    5
#define WiiOptions_ClassicOptions_buttonZL_tag   6
#define WiiOptions_ClassicOptions_buttonR_tag    7
#define WiiOptions_ClassicOptions_buttonZR_tag   8
#define WiiOptions_ClassicOptions_buttonMinus_tag 9
#define WiiOptions_ClassicOptions_buttonPlus_tag 10
#define WiiOptions_ClassicOptions_buttonHome_tag 11
#define WiiOptions_ClassicOptions_buttonUp_tag   12
#define WiiOptions_ClassicOptions_buttonDown_tag 13
#define WiiOptions_ClassicOptions_buttonLeft_tag 14
#define WiiOptions_ClassicOptions_buttonRight_tag 15
#define WiiOptions_ClassicOptions_leftStick_tag  16
#define WiiOptions_ClassicOptions_rightStick_tag 17
#define WiiOptions_ClassicOptions_leftTrigger_tag 18
#define WiiOptions_ClassicOptions_rightTrigger_tag 19
#define WiiOptions_TaikoOptions_buttonKatLeft_tag 1
#define WiiOptions_TaikoOptions_buttonKatRight_tag 2
#define WiiOptions_TaikoOptions_buttonDonLeft_tag 3
#define WiiOptions_TaikoOptions_buttonDonRight_tag 4
#define WiiOptions_GuitarOptions_buttonRed_tag   1
#define WiiOptions_GuitarOptions_buttonGreen_tag 2
#define WiiOptions_GuitarOptions_buttonYellow_tag 3
#define WiiOptions_GuitarOptions_buttonBlue_tag  4
#define WiiOptions_GuitarOptions_buttonOrange_tag 5
#define WiiOptions_GuitarOptions_buttonPedal_tag 6
#define WiiOptions_GuitarOptions_buttonMinus_tag 7
#define WiiOptions_GuitarOptions_buttonPlus_tag  8
#define WiiOptions_GuitarOptions_strumUp_tag     9
#define WiiOptions_GuitarOptions_strumDown_tag   10
#define WiiOptions_GuitarOptions_stick_tag       11
#define WiiOptions_GuitarOptions_whammyBar_tag   12
#define WiiOptions_DrumOptions_buttonRed_tag     1
#define WiiOptions_DrumOptions_buttonGreen_tag   2
#define WiiOptions_DrumOptions_buttonYellow_tag  3
#define WiiOptions_DrumOptions_buttonBlue_tag    4
#define WiiOptions_DrumOptions_buttonOrange_tag  5
#define WiiOptions_DrumOptions_buttonPedal_tag   6
#define WiiOptions_DrumOptions_buttonMinus_tag   7
#define WiiOptions_DrumOptions_buttonPlus_tag    8
#define WiiOptions_DrumOptions_stick_tag         9
#define WiiOptions_TurntableOptions_buttonLeftRed_tag 1
#define WiiOptions_TurntableOptions_buttonLeftGreen_tag 2
#define WiiOptions_TurntableOptions_buttonLeftBlue_tag 3
#define WiiOptions_TurntableOptions_buttonRightRed_tag 4
#define WiiOptions_TurntableOptions_buttonRightGreen_tag 5
#define WiiOptions_TurntableOptions_buttonRightBlue_tag 6
#define WiiOptions_TurntableOptions_buttonMinus_tag 7
#define WiiOptions_TurntableOptions_buttonPlus_tag 8
#define WiiOptions_TurntableOptions_buttonEuphoria_tag 9
#define WiiOptions_TurntableOptions_stick_tag    10
#define WiiOptions_TurntableOptions_leftTurntable_tag 11
#define WiiOptions_TurntableOptions_rightTurntable_tag 12
#define WiiOptions_TurntableOptions_effects_tag  13
#define WiiOptions_TurntableOptions_fader_tag    14
#define WiiOptions_ControllerOptions_nunchuk_tag 1
#define WiiOptions_ControllerOptions_classic_tag 2
#define WiiOptions_ControllerOptions_taiko_tag   3
#define WiiOptions_ControllerOptions_guitar_tag  4
#define WiiOptions_ControllerOptions_drum_tag    5
#define WiiOptions_ControllerOptions_turntable_tag 6
#define WiiOptions_enabled_tag                   1
#define WiiOptions_deprecatedI2cBlock_tag        2
#define WiiOptions_deprecatedI2cSDAPin_tag       3
#define WiiOptions_deprecatedI2cSCLPin_tag       4
#define WiiOptions_deprecatedI2cSpeed_tag        5
#define WiiOptions_controllers_tag               6
#define SNESOptions_enabled_tag                  1
#define SNESOptions_clockPin_tag                 2
#define SNESOptions_latchPin_tag                 3
#define SNESOptions_dataPin_tag                  4
#define KeyboardHostOptions_enabled_tag          1
#define KeyboardHostOptions_deprecatedPinDplus_tag 2
#define KeyboardHostOptions_mapping_tag          3
#define KeyboardHostOptions_deprecatedPin5V_tag  4
#define KeyboardHostOptions_mouseLeft_tag        5
#define KeyboardHostOptions_mouseMiddle_tag      6
#define KeyboardHostOptions_mouseRight_tag       7
#define FocusModeOptions_enabled_tag             1
#define FocusModeOptions_pin_tag                 2
#define FocusModeOptions_buttonLockMask_tag      3
#define FocusModeOptions_oledLockEnabled_tag     4
#define FocusModeOptions_rgbLockEnabled_tag      5
#define FocusModeOptions_buttonLockEnabled_tag   6
#define FocusModeOptions_macroLockEnabled_tag    7
#define MacroInput_buttonMask_tag                1
#define MacroInput_duration_tag                  2
#define MacroInput_waitDuration_tag              3
#define Macro_macroType_tag                      1
#define Macro_macroLabel_tag                     2
#define Macro_macroInputs_tag                    3
#define Macro_enabled_tag                        4
#define Macro_useMacroTriggerButton_tag          5
#define Macro_deprecatedMacroTriggerPin_tag      6
#define Macro_macroTriggerButton_tag             7
#define Macro_exclusive_tag                      8
#define Macro_interruptible_tag                  9
#define Macro_showFrames_tag                     10
#define MacroOptions_enabled_tag                 1
#define MacroOptions_deprecatedPin_tag           2
#define MacroOptions_macroList_tag               3
#define MacroOptions_macroBoardLedEnabled_tag    4
#define InputHistoryOptions_enabled_tag          1
#define InputHistoryOptions_length_tag           2
#define InputHistoryOptions_col_tag              3
#define InputHistoryOptions_row_tag              4
#define RotaryPinOptions_enabled_tag             1
#define RotaryPinOptions_pinA_tag                2
#define RotaryPinOptions_pinB_tag                3
#define RotaryPinOptions_mode_tag                4
#define RotaryPinOptions_pulsesPerRevolution_tag 5
#define RotaryPinOptions_resetAfter_tag          6
#define RotaryPinOptions_allowWrapAround_tag     7
#define RotaryPinOptions_multiplier_tag          8
#define RotaryOptions_enabled_tag                1
#define RotaryOptions_encoderOne_tag             2
#define RotaryOptions_encoderTwo_tag             3
#define PCF8575Options_enabled_tag               1
#define PCF8575Options_deprecatedI2cBlock_tag    2
#define PCF8575Options_pins_tag                  3
#define DRV8833RumbleOptions_enabled_tag         1
#define DRV8833RumbleOptions_leftMotorPin_tag    2
#define DRV8833RumbleOptions_rightMotorPin_tag   3
#define DRV8833RumbleOptions_motorSleepPin_tag   4
#define DRV8833RumbleOptions_pwmFrequency_tag    5
#define DRV8833RumbleOptions_dutyMin_tag         6
#define DRV8833RumbleOptions_dutyMax_tag         7
#define ReactiveLEDInfo_pin_tag                  1
#define ReactiveLEDInfo_action_tag               2
#define ReactiveLEDInfo_modeDown_tag             3
#define ReactiveLEDInfo_modeUp_tag               4
#define ReactiveLEDOptions_enabled_tag           1
#define ReactiveLEDOptions_leds_tag              2
#define AddonOptions_bootselButtonOptions_tag    1
#define AddonOptions_onBoardLedOptions_tag       2
#define AddonOptions_analogOptions_tag           3
#define AddonOptions_turboOptions_tag            4
#define AddonOptions_deprecatedSliderOptions_tag 5
#define AddonOptions_reverseOptions_tag          6
#define AddonOptions_analogADS1219Options_tag    7
#define AddonOptions_dualDirectionalOptions_tag  8
#define AddonOptions_buzzerOptions_tag           9
#define AddonOptions_deprecatedExtraButtonOptions_tag 10
#define AddonOptions_playerNumberOptions_tag     11
#define AddonOptions_ps4Options_tag              12
#define AddonOptions_wiiOptions_tag              13
#define AddonOptions_socdSliderOptions_tag       14
#define AddonOptions_snesOptions_tag             15
#define AddonOptions_focusModeOptions_tag        16
#define AddonOptions_keyboardHostOptions_tag     17
#define AddonOptions_tiltOptions_tag             18
#define AddonOptions_psPassthroughOptions_tag    19
#define AddonOptions_macroOptions_tag            20
#define AddonOptions_inputHistoryOptions_tag     21
#define AddonOptions_xbonePassthroughOptions_tag 22
#define AddonOptions_analogADS1256Options_tag    23
#define AddonOptions_rotaryOptions_tag           24
#define AddonOptions_pcf8575Options_tag          25
#define AddonOptions_drv8833RumbleOptions_tag    26
#define AddonOptions_reactiveLEDOptions_tag      27
#define MigrationHistory_hotkeysMigrated_tag     1
#define MigrationHistory_gpioMappingsMigrated_tag 2
#define MigrationHistory_buttonProfilesMigrated_tag 3
#define MigrationHistory_profileEnabledFlagsMigrated_tag 4
#define Config_boardVersion_tag                  1
#define Config_gamepadOptions_tag                2
#define Config_hotkeyOptions_tag                 3
#define Config_deprecatedPinMappings_tag         4
#define Config_keyboardMapping_tag               5
#define Config_displayOptions_tag                6
#define Config_ledOptions_tag                    7
#define Config_animationOptions_tag              8
#define Config_addonOptions_tag                  9
#define Config_forcedSetupOptions_tag            10
#define Config_profileOptions_tag                11
#define Config_boardConfig_tag                   12
#define Config_gpioMappings_tag                  13
#define Config_migrations_tag                    14
#define Config_peripheralOptions_tag             15
#define Config_CSmode_tag                        16

/* Struct field encoding specification for nanopb */
#define GamepadOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    inputMode,                        1, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    dpadMode,                         2, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    socdMode,                         3, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     invertXAxis,                      4, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     invertYAxis,                      5, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     switchTpShareForDs4,              6, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     lockHotkeys,                      7, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     fourWayMode,                      8, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   profileNumber,                    9, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    ps4ControllerType,               10, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   debounceDelay,                   11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeB1,                     12, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeB2,                     13, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeB3,                     14, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeB4,                     15, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeL1,                     16, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeL2,                     17, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeR1,                     18, 0) \
X(a, STATIC,   OPTIONAL, INT32,    inputModeR2,                     19, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     ps4ReportHack,                   20, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    ps4AuthType,                     21, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    ps5AuthType,                     22, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    xinputAuthType,                  23, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    ps4ControllerIDMode,             24, 0)
#define GamepadOptions_CALLBACK NULL
#define GamepadOptions_DEFAULT NULL

#define KeyboardMapping_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   keyDpadUp,                        1, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyDpadDown,                      2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyDpadLeft,                      3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyDpadRight,                     4, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonB1,                      5, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonB2,                      6, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonB3,                      7, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonB4,                      8, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonL1,                      9, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonR1,                     10, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonL2,                     11, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonR2,                     12, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonS1,                     13, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonS2,                     14, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonL3,                     15, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonR3,                     16, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonA1,                     17, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonA2,                     18, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonA3,                     19, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonA4,                     20, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE1,                     21, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE2,                     22, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE3,                     23, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE4,                     24, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE5,                     25, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE6,                     26, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE7,                     27, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE8,                     28, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE9,                     29, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE10,                    30, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE11,                    31, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   keyButtonE12,                    32, 0)
#define KeyboardMapping_CALLBACK NULL
#define KeyboardMapping_DEFAULT NULL

#define HotkeyEntry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   dpadMask,                         1, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    action,                           2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   buttonsMask,                      3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   auxMask,                          4, 0)
#define HotkeyEntry_CALLBACK NULL
#define HotkeyEntry_DEFAULT NULL

#define HotkeyOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey01,                         1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey02,                         2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey03,                         3, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey04,                         4, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey05,                         5, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey06,                         6, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey07,                         7, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey08,                         8, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey09,                         9, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey10,                        10, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey11,                        11, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey12,                        12, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey13,                        13, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey14,                        14, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey15,                        15, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkey16,                        16, 0)
#define HotkeyOptions_CALLBACK NULL
#define HotkeyOptions_DEFAULT NULL
#define HotkeyOptions_hotkey01_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey02_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey03_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey04_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey05_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey06_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey07_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey08_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey09_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey10_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey11_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey12_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey13_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey14_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey15_MSGTYPE HotkeyEntry
#define HotkeyOptions_hotkey16_MSGTYPE HotkeyEntry

#define PeripheralOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  blockI2C0,                        1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  blockI2C1,                        2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  blockSPI0,                        3, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  blockSPI1,                        4, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  blockUSB0,                        5, 0)
#define PeripheralOptions_CALLBACK NULL
#define PeripheralOptions_DEFAULT NULL
#define PeripheralOptions_blockI2C0_MSGTYPE PeripheralOptions_I2COptions
#define PeripheralOptions_blockI2C1_MSGTYPE PeripheralOptions_I2COptions
#define PeripheralOptions_blockSPI0_MSGTYPE PeripheralOptions_SPIOptions
#define PeripheralOptions_blockSPI1_MSGTYPE PeripheralOptions_SPIOptions
#define PeripheralOptions_blockUSB0_MSGTYPE PeripheralOptions_USBOptions

#define PeripheralOptions_I2COptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    sda,                              2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    scl,                              3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   speed,                            4, 0)
#define PeripheralOptions_I2COptions_CALLBACK NULL
#define PeripheralOptions_I2COptions_DEFAULT NULL

#define PeripheralOptions_SPIOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    rx,                               2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    cs,                               3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    sck,                              4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tx,                               5, 0)
#define PeripheralOptions_SPIOptions_CALLBACK NULL
#define PeripheralOptions_SPIOptions_DEFAULT NULL

#define PeripheralOptions_USBOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    dp,                               2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    enable5v,                         3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   order,                            4, 0)
#define PeripheralOptions_USBOptions_CALLBACK NULL
#define PeripheralOptions_USBOptions_DEFAULT NULL

#define ForcedSetupOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    mode,                             1, 0)
#define ForcedSetupOptions_CALLBACK NULL
#define ForcedSetupOptions_DEFAULT NULL

#define ButtonLayoutParamsCommon_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    startX,                           1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    startY,                           2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRadius,                     3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPadding,                    4, 0)
#define ButtonLayoutParamsCommon_CALLBACK NULL
#define ButtonLayoutParamsCommon_DEFAULT NULL

#define ButtonLayoutParamsLeft_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    layout,                           1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  common,                           2, 0)
#define ButtonLayoutParamsLeft_CALLBACK NULL
#define ButtonLayoutParamsLeft_DEFAULT NULL
#define ButtonLayoutParamsLeft_common_MSGTYPE ButtonLayoutParamsCommon

#define ButtonLayoutParamsRight_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    layout,                           1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  common,                           2, 0)
#define ButtonLayoutParamsRight_CALLBACK NULL
#define ButtonLayoutParamsRight_DEFAULT NULL
#define ButtonLayoutParamsRight_common_MSGTYPE ButtonLayoutParamsCommon

#define ButtonLayoutCustomOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  paramsLeft,                       1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  paramsRight,                      2, 0)
#define ButtonLayoutCustomOptions_CALLBACK NULL
#define ButtonLayoutCustomOptions_DEFAULT NULL
#define ButtonLayoutCustomOptions_paramsLeft_MSGTYPE ButtonLayoutParamsLeft
#define ButtonLayoutCustomOptions_paramsRight_MSGTYPE ButtonLayoutParamsRight

#define PinMappings_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadUp,                        1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadDown,                      2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadLeft,                      3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadRight,                     4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB1,                      5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB2,                      6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB3,                      7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB4,                      8, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL1,                      9, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR1,                     10, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL2,                     11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR2,                     12, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonS1,                     13, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonS2,                     14, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL3,                     15, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR3,                     16, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonA1,                     17, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonA2,                     18, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonFn,                     19, 0)
#define PinMappings_CALLBACK NULL
#define PinMappings_DEFAULT NULL

#define GpioMappingInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, ENUM,     action,                           1, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    direction,                        2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customDpadMask,                   3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customButtonMask,                 4, 0)
#define GpioMappingInfo_CALLBACK NULL
#define GpioMappingInfo_DEFAULT (const pb_byte_t*)"\x08\xf6\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00"

#define GpioMappings_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  pins,                             1, 0) \
X(a, STATIC,   OPTIONAL, STRING,   profileLabel,                     2, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          3, 0)
#define GpioMappings_CALLBACK NULL
#define GpioMappings_DEFAULT (const pb_byte_t*)"\x18\x00\x00"
#define GpioMappings_pins_MSGTYPE GpioMappingInfo

#define AlternativePinMappings_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB1,                      1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB2,                      2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB3,                      3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB4,                      4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL1,                      5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR1,                      6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL2,                      7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR2,                      8, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadUp,                        9, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadDown,                     10, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadLeft,                     11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadRight,                    12, 0)
#define AlternativePinMappings_CALLBACK NULL
#define AlternativePinMappings_DEFAULT NULL

#define ProfileOptions_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  deprecatedAlternativePinMappings,  1, 0) \
X(a, STATIC,   REPEATED, MESSAGE,  gpioMappingsSets,                 2, 0)
#define ProfileOptions_CALLBACK NULL
#define ProfileOptions_DEFAULT NULL
#define ProfileOptions_deprecatedAlternativePinMappings_MSGTYPE AlternativePinMappings
#define ProfileOptions_gpioMappingsSets_MSGTYPE GpioMappings

#define DisplayOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cBlock,               2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSDAPin,              3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSCLPin,              4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cAddress,             5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSpeed,               6, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    buttonLayout,                     7, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    buttonLayoutRight,                8, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buttonLayoutCustomOptions,        9, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    splashMode,                      10, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    splashChoice,                    11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    splashDuration,                  12, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    splashImage,                     13, 0) \
X(a, STATIC,   OPTIONAL, INT32,    size,                            14, 0) \
X(a, STATIC,   OPTIONAL, INT32,    flip,                            15, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     invert,                          16, 0) \
X(a, STATIC,   OPTIONAL, INT32,    displaySaverTimeout,             17, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     turnOffWhenSuspended,            18, 0)
#define DisplayOptions_CALLBACK NULL
#define DisplayOptions_DEFAULT NULL
#define DisplayOptions_buttonLayoutCustomOptions_MSGTYPE ButtonLayoutCustomOptions

#define LEDOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    dataPin,                          1, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    ledFormat,                        2, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    ledLayout,                        3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   ledsPerButton,                    4, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   brightnessMaximum,                5, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   brightnessSteps,                  6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexUp,                          7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexDown,                        8, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexLeft,                        9, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexRight,                      10, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexB1,                         11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexB2,                         12, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexB3,                         13, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexB4,                         14, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexL1,                         15, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexR1,                         16, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexL2,                         17, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexR2,                         18, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexS1,                         19, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexS2,                         20, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexL3,                         21, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexR3,                         22, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexA1,                         23, 0) \
X(a, STATIC,   OPTIONAL, INT32,    indexA2,                         24, 0) \
X(a, STATIC,   OPTIONAL, ENUM,     pledType,                        25, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledPin1,                        26, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledPin2,                        27, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledPin3,                        28, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledPin4,                        29, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   pledColor,                       30, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     turnOffWhenSuspended,            31, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledIndex1,                      32, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledIndex2,                      33, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledIndex3,                      34, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pledIndex4,                      35, 0)
#define LEDOptions_CALLBACK NULL
#define LEDOptions_DEFAULT (const pb_byte_t*)"\xc8\x01\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00"

#define AnimationOptions_Proto_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   baseAnimationIndex,               1, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   brightness,                       2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   staticColorIndex,                 3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   buttonColorIndex,                 4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    chaseCycleTime,                   5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    rainbowCycleTime,                 6, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   themeIndex,                       7, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     hasCustomTheme,                   8, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeUp,                    9, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeDown,                 10, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeLeft,                 11, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeRight,                12, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB1,                   13, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB2,                   14, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB3,                   15, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB4,                   16, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeL1,                   17, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeR1,                   18, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeL2,                   19, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeR2,                   20, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeS1,                   21, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeS2,                   22, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeL3,                   23, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeR3,                   24, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeA1,                   25, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeA2,                   26, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeUpPressed,            27, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeDownPressed,          28, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeLeftPressed,          29, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeRightPressed,         30, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB1Pressed,            31, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB2Pressed,            32, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB3Pressed,            33, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeB4Pressed,            34, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeL1Pressed,            35, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeR1Pressed,            36, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeL2Pressed,            37, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeR2Pressed,            38, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeS1Pressed,            39, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeS2Pressed,            40, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeL3Pressed,            41, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeR3Pressed,            42, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeA1Pressed,            43, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   customThemeA2Pressed,            44, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   buttonPressColorCooldownTimeInMs, 45, 0)
#define AnimationOptions_Proto_CALLBACK NULL
#define AnimationOptions_Proto_DEFAULT NULL

#define BootselButtonOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   buttonMap,                        2, 0)
#define BootselButtonOptions_CALLBACK NULL
#define BootselButtonOptions_DEFAULT NULL

#define OnBoardLedOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    mode,                             1, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          2, 0)
#define OnBoardLedOptions_CALLBACK NULL
#define OnBoardLedOptions_DEFAULT NULL

#define AnalogOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    analogAdc1PinX,                   2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    analogAdc1PinY,                   3, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     forced_circularity,               4, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   inner_deadzone,                   5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    analogAdc2PinX,                   6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    analogAdc2PinY,                   7, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    analogAdc1Mode,                   8, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    analogAdc2Mode,                   9, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    analogAdc1Invert,                10, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    analogAdc2Invert,                11, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     auto_calibrate,                  12, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   outer_deadzone,                  13, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     analog_smoothing,                14, 0) \
X(a, STATIC,   OPTIONAL, FLOAT,    smoothing_factor,                15, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   analog_error,                    16, 0)
#define AnalogOptions_CALLBACK NULL
#define AnalogOptions_DEFAULT NULL

#define TurboOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedButtonPin,              2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    ledPin,                           3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shotCount,                        4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    shmupDialPin,                     5, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     shmupModeEnabled,                 6, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupAlwaysOn1,                   7, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupAlwaysOn2,                   8, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupAlwaysOn3,                   9, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupAlwaysOn4,                  10, 0) \
X(a, STATIC,   OPTIONAL, INT32,    shmupBtn1Pin,                    11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    shmupBtn2Pin,                    12, 0) \
X(a, STATIC,   OPTIONAL, INT32,    shmupBtn3Pin,                    13, 0) \
X(a, STATIC,   OPTIONAL, INT32,    shmupBtn4Pin,                    14, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupBtnMask1,                   15, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupBtnMask2,                   16, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupBtnMask3,                   17, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   shmupBtnMask4,                   18, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    shmupMixMode,                    19, 0)
#define TurboOptions_CALLBACK NULL
#define TurboOptions_DEFAULT NULL

#define SliderOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPinSliderOne,           2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPinSliderTwo,           3, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    deprecatedModeOne,                4, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    deprecatedModeTwo,                5, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    deprecatedModeDefault,            6, 0)
#define SliderOptions_CALLBACK NULL
#define SliderOptions_DEFAULT NULL

#define SOCDSliderOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPinOne,                 2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPinTwo,                 3, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    modeDefault,                      4, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    deprecatedModeOne,                5, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    deprecatedModeTwo,                6, 0)
#define SOCDSliderOptions_CALLBACK NULL
#define SOCDSliderOptions_DEFAULT NULL

#define ReverseOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPin,                        2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    ledPin,                           3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   actionUp,                         4, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   actionDown,                       5, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   actionLeft,                       6, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   actionRight,                      7, 0)
#define ReverseOptions_CALLBACK NULL
#define ReverseOptions_DEFAULT NULL

#define AnalogADS1219Options_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cBlock,               2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSDAPin,              3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSCLPin,              4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cAddress,             5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSpeed,               6, 0)
#define AnalogADS1219Options_CALLBACK NULL
#define AnalogADS1219Options_DEFAULT NULL

#define AnalogADS1256Options_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    spiBlock,                         2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    csPin,                            3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    drdyPin,                          4, 0) \
X(a, STATIC,   OPTIONAL, FLOAT,    avdd,                             5, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     enableTriggers,                   6, 0)
#define AnalogADS1256Options_CALLBACK NULL
#define AnalogADS1256Options_DEFAULT NULL

#define DualDirectionalOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedUpPin,                  2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedDownPin,                3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedLeftPin,                4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedRightPin,               5, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    dpadMode,                         6, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    combineMode,                      7, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     fourWayMode,                      8, 0)
#define DualDirectionalOptions_CALLBACK NULL
#define DualDirectionalOptions_DEFAULT NULL

#define TiltOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tilt1Pin,                         2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tilt2Pin,                         3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedTiltFunctionPin,        4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltLeftAnalogUpPin,              5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltLeftAnalogDownPin,            6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltLeftAnalogLeftPin,            7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltLeftAnalogRightPin,           8, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltRightAnalogUpPin,             9, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltRightAnalogDownPin,          10, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltRightAnalogLeftPin,          11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    tiltRightAnalogRightPin,         12, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    tiltSOCDMode,                    13, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt1LeftX,                14, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt1LeftY,                15, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt1RightX,               16, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt1RightY,               17, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt2LeftX,                18, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt2LeftY,                19, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt2RightX,               20, 0) \
X(a, STATIC,   OPTIONAL, INT32,    factorTilt2RightY,               21, 0)
#define TiltOptions_CALLBACK NULL
#define TiltOptions_DEFAULT NULL

#define BuzzerOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pin,                              2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   volume,                           3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    enablePin,                        4, 0)
#define BuzzerOptions_CALLBACK NULL
#define BuzzerOptions_DEFAULT NULL

#define ExtraButtonOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pin,                              2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   buttonMap,                        3, 0)
#define ExtraButtonOptions_CALLBACK NULL
#define ExtraButtonOptions_DEFAULT NULL

#define PlayerNumberOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   number,                           2, 0)
#define PlayerNumberOptions_CALLBACK NULL
#define PlayerNumberOptions_DEFAULT NULL

#define PS4Options_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    serial,                           2, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    signature,                        3, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaN,                             4, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaE,                             5, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaD,                             6, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaP,                             7, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaQ,                             8, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaDP,                            9, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaDQ,                           10, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaQP,                           11, 0) \
X(a, STATIC,   OPTIONAL, BYTES,    rsaRN,                           12, 0)
#define PS4Options_CALLBACK NULL
#define PS4Options_DEFAULT NULL

#define PSPassthroughOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPinDplus,               2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPin5V,                  3, 0)
#define PSPassthroughOptions_CALLBACK NULL
#define PSPassthroughOptions_DEFAULT NULL

#define XBOnePassthroughOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0)
#define XBOnePassthroughOptions_CALLBACK NULL
#define XBOnePassthroughOptions_DEFAULT NULL

#define WiiOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cBlock,               2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSDAPin,              3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSCLPin,              4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cSpeed,               5, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  controllers,                      6, 0)
#define WiiOptions_CALLBACK NULL
#define WiiOptions_DEFAULT NULL
#define WiiOptions_controllers_MSGTYPE WiiOptions_ControllerOptions

#define WiiOptions_AnalogAxis_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    axisType,                         1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    minRange,                         2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    maxRange,                         3, 0)
#define WiiOptions_AnalogAxis_CALLBACK NULL
#define WiiOptions_AnalogAxis_DEFAULT NULL

#define WiiOptions_StickOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  x,                                1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  y,                                2, 0)
#define WiiOptions_StickOptions_CALLBACK NULL
#define WiiOptions_StickOptions_DEFAULT NULL
#define WiiOptions_StickOptions_x_MSGTYPE WiiOptions_AnalogAxis
#define WiiOptions_StickOptions_y_MSGTYPE WiiOptions_AnalogAxis

#define WiiOptions_NunchukOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    buttonC,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonZ,                          2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stick,                            3, 0)
#define WiiOptions_NunchukOptions_CALLBACK NULL
#define WiiOptions_NunchukOptions_DEFAULT NULL
#define WiiOptions_NunchukOptions_stick_MSGTYPE WiiOptions_StickOptions

#define WiiOptions_ClassicOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    buttonA,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonB,                          2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonX,                          3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonY,                          4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonL,                          5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonZL,                         6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonR,                          7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonZR,                         8, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonMinus,                      9, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPlus,                      10, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonHome,                      11, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonUp,                        12, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonDown,                      13, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonLeft,                      14, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRight,                     15, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  leftStick,                       16, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rightStick,                      17, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  leftTrigger,                     18, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rightTrigger,                    19, 0)
#define WiiOptions_ClassicOptions_CALLBACK NULL
#define WiiOptions_ClassicOptions_DEFAULT NULL
#define WiiOptions_ClassicOptions_leftStick_MSGTYPE WiiOptions_StickOptions
#define WiiOptions_ClassicOptions_rightStick_MSGTYPE WiiOptions_StickOptions
#define WiiOptions_ClassicOptions_leftTrigger_MSGTYPE WiiOptions_AnalogAxis
#define WiiOptions_ClassicOptions_rightTrigger_MSGTYPE WiiOptions_AnalogAxis

#define WiiOptions_TaikoOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    buttonKatLeft,                    1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonKatRight,                   2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonDonLeft,                    3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonDonRight,                   4, 0)
#define WiiOptions_TaikoOptions_CALLBACK NULL
#define WiiOptions_TaikoOptions_DEFAULT NULL

#define WiiOptions_GuitarOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRed,                        1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonGreen,                      2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonYellow,                     3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonBlue,                       4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonOrange,                     5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPedal,                      6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonMinus,                      7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPlus,                       8, 0) \
X(a, STATIC,   OPTIONAL, INT32,    strumUp,                          9, 0) \
X(a, STATIC,   OPTIONAL, INT32,    strumDown,                       10, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stick,                           11, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  whammyBar,                       12, 0)
#define WiiOptions_GuitarOptions_CALLBACK NULL
#define WiiOptions_GuitarOptions_DEFAULT NULL
#define WiiOptions_GuitarOptions_stick_MSGTYPE WiiOptions_StickOptions
#define WiiOptions_GuitarOptions_whammyBar_MSGTYPE WiiOptions_AnalogAxis

#define WiiOptions_DrumOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRed,                        1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonGreen,                      2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonYellow,                     3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonBlue,                       4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonOrange,                     5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPedal,                      6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonMinus,                      7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPlus,                       8, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stick,                            9, 0)
#define WiiOptions_DrumOptions_CALLBACK NULL
#define WiiOptions_DrumOptions_DEFAULT NULL
#define WiiOptions_DrumOptions_stick_MSGTYPE WiiOptions_StickOptions

#define WiiOptions_TurntableOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    buttonLeftRed,                    1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonLeftGreen,                  2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonLeftBlue,                   3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRightRed,                   4, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRightGreen,                 5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRightBlue,                  6, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonMinus,                      7, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPlus,                       8, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonEuphoria,                   9, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stick,                           10, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  leftTurntable,                   11, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rightTurntable,                  12, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  effects,                         13, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  fader,                           14, 0)
#define WiiOptions_TurntableOptions_CALLBACK NULL
#define WiiOptions_TurntableOptions_DEFAULT NULL
#define WiiOptions_TurntableOptions_stick_MSGTYPE WiiOptions_StickOptions
#define WiiOptions_TurntableOptions_leftTurntable_MSGTYPE WiiOptions_AnalogAxis
#define WiiOptions_TurntableOptions_rightTurntable_MSGTYPE WiiOptions_AnalogAxis
#define WiiOptions_TurntableOptions_effects_MSGTYPE WiiOptions_AnalogAxis
#define WiiOptions_TurntableOptions_fader_MSGTYPE WiiOptions_AnalogAxis

#define WiiOptions_ControllerOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  nunchuk,                          1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  classic,                          2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  taiko,                            3, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  guitar,                           4, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  drum,                             5, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  turntable,                        6, 0)
#define WiiOptions_ControllerOptions_CALLBACK NULL
#define WiiOptions_ControllerOptions_DEFAULT NULL
#define WiiOptions_ControllerOptions_nunchuk_MSGTYPE WiiOptions_NunchukOptions
#define WiiOptions_ControllerOptions_classic_MSGTYPE WiiOptions_ClassicOptions
#define WiiOptions_ControllerOptions_taiko_MSGTYPE WiiOptions_TaikoOptions
#define WiiOptions_ControllerOptions_guitar_MSGTYPE WiiOptions_GuitarOptions
#define WiiOptions_ControllerOptions_drum_MSGTYPE WiiOptions_DrumOptions
#define WiiOptions_ControllerOptions_turntable_MSGTYPE WiiOptions_TurntableOptions

#define SNESOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    clockPin,                         2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    latchPin,                         3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    dataPin,                          4, 0)
#define SNESOptions_CALLBACK NULL
#define SNESOptions_DEFAULT NULL

#define KeyboardHostOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPinDplus,               2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  mapping,                          3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPin5V,                  4, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   mouseLeft,                        5, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   mouseMiddle,                      6, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   mouseRight,                       7, 0)
#define KeyboardHostOptions_CALLBACK NULL
#define KeyboardHostOptions_DEFAULT NULL
#define KeyboardHostOptions_mapping_MSGTYPE KeyboardMapping

#define FocusModeOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pin,                              2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    buttonLockMask,                   3, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     oledLockEnabled,                  4, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     rgbLockEnabled,                   5, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     buttonLockEnabled,                6, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     macroLockEnabled,                 7, 0)
#define FocusModeOptions_CALLBACK NULL
#define FocusModeOptions_DEFAULT NULL

#define MacroInput_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   buttonMask,                       1, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   duration,                         2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   waitDuration,                     3, 0)
#define MacroInput_CALLBACK NULL
#define MacroInput_DEFAULT (const pb_byte_t*)"\x18\x00\x00"

#define Macro_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    macroType,                        1, 0) \
X(a, STATIC,   OPTIONAL, STRING,   macroLabel,                       2, 0) \
X(a, STATIC,   REPEATED, MESSAGE,  macroInputs,                      3, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          4, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     useMacroTriggerButton,            5, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedMacroTriggerPin,        6, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   macroTriggerButton,               7, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     exclusive,                        8, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     interruptible,                    9, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     showFrames,                      10, 0)
#define Macro_CALLBACK NULL
#define Macro_DEFAULT (const pb_byte_t*)"\x08\x01\x40\x01\x48\x01\x50\x00\x00"
#define Macro_macroInputs_MSGTYPE MacroInput

#define MacroOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedPin,                    2, 0) \
X(a, STATIC,   REPEATED, MESSAGE,  macroList,                        3, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     macroBoardLedEnabled,             4, 0)
#define MacroOptions_CALLBACK NULL
#define MacroOptions_DEFAULT NULL
#define MacroOptions_macroList_MSGTYPE Macro

#define InputHistoryOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   length,                           2, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   col,                              3, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   row,                              4, 0)
#define InputHistoryOptions_CALLBACK NULL
#define InputHistoryOptions_DEFAULT NULL

#define RotaryPinOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinA,                             2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    pinB,                             3, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    mode,                             4, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   pulsesPerRevolution,              5, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   resetAfter,                       6, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     allowWrapAround,                  7, 0) \
X(a, STATIC,   OPTIONAL, FLOAT,    multiplier,                       8, 0)
#define RotaryPinOptions_CALLBACK NULL
#define RotaryPinOptions_DEFAULT NULL

#define RotaryOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  encoderOne,                       2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  encoderTwo,                       3, 0)
#define RotaryOptions_CALLBACK NULL
#define RotaryOptions_DEFAULT NULL
#define RotaryOptions_encoderOne_MSGTYPE RotaryPinOptions
#define RotaryOptions_encoderTwo_MSGTYPE RotaryPinOptions

#define PCF8575Options_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    deprecatedI2cBlock,               2, 0) \
X(a, STATIC,   REPEATED, MESSAGE,  pins,                             3, 0)
#define PCF8575Options_CALLBACK NULL
#define PCF8575Options_DEFAULT NULL
#define PCF8575Options_pins_MSGTYPE GpioMappingInfo

#define DRV8833RumbleOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   OPTIONAL, INT32,    leftMotorPin,                     2, 0) \
X(a, STATIC,   OPTIONAL, INT32,    rightMotorPin,                    3, 0) \
X(a, STATIC,   OPTIONAL, INT32,    motorSleepPin,                    4, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   pwmFrequency,                     5, 0) \
X(a, STATIC,   OPTIONAL, FLOAT,    dutyMin,                          6, 0) \
X(a, STATIC,   OPTIONAL, FLOAT,    dutyMax,                          7, 0)
#define DRV8833RumbleOptions_CALLBACK NULL
#define DRV8833RumbleOptions_DEFAULT NULL

#define ReactiveLEDInfo_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    pin,                              1, 0) \
X(a, STATIC,   OPTIONAL, ENUM,     action,                           2, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    modeDown,                         3, 0) \
X(a, STATIC,   OPTIONAL, UENUM,    modeUp,                           4, 0)
#define ReactiveLEDInfo_CALLBACK NULL
#define ReactiveLEDInfo_DEFAULT (const pb_byte_t*)"\x10\xf6\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00"

#define ReactiveLEDOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     enabled,                          1, 0) \
X(a, STATIC,   REPEATED, MESSAGE,  leds,                             2, 0)
#define ReactiveLEDOptions_CALLBACK NULL
#define ReactiveLEDOptions_DEFAULT NULL
#define ReactiveLEDOptions_leds_MSGTYPE ReactiveLEDInfo

#define AddonOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  bootselButtonOptions,             1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  onBoardLedOptions,                2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  analogOptions,                    3, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  turboOptions,                     4, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  deprecatedSliderOptions,          5, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  reverseOptions,                   6, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  analogADS1219Options,             7, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dualDirectionalOptions,           8, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buzzerOptions,                    9, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  deprecatedExtraButtonOptions,    10, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  playerNumberOptions,             11, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ps4Options,                      12, 1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  wiiOptions,                      13, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  socdSliderOptions,               14, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  snesOptions,                     15, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  focusModeOptions,                16, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  keyboardHostOptions,             17, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tiltOptions,                     18, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  psPassthroughOptions,            19, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  macroOptions,                    20, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  inputHistoryOptions,             21, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  xbonePassthroughOptions,         22, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  analogADS1256Options,            23, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  rotaryOptions,                   24, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pcf8575Options,                  25, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  drv8833RumbleOptions,            26, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  reactiveLEDOptions,              27, 0)
#define AddonOptions_CALLBACK NULL
#define AddonOptions_DEFAULT NULL
#define AddonOptions_bootselButtonOptions_MSGTYPE BootselButtonOptions
#define AddonOptions_onBoardLedOptions_MSGTYPE OnBoardLedOptions
#define AddonOptions_analogOptions_MSGTYPE AnalogOptions
#define AddonOptions_turboOptions_MSGTYPE TurboOptions
#define AddonOptions_deprecatedSliderOptions_MSGTYPE SliderOptions
#define AddonOptions_reverseOptions_MSGTYPE ReverseOptions
#define AddonOptions_analogADS1219Options_MSGTYPE AnalogADS1219Options
#define AddonOptions_dualDirectionalOptions_MSGTYPE DualDirectionalOptions
#define AddonOptions_buzzerOptions_MSGTYPE BuzzerOptions
#define AddonOptions_deprecatedExtraButtonOptions_MSGTYPE ExtraButtonOptions
#define AddonOptions_playerNumberOptions_MSGTYPE PlayerNumberOptions
#define AddonOptions_ps4Options_MSGTYPE PS4Options
#define AddonOptions_wiiOptions_MSGTYPE WiiOptions
#define AddonOptions_socdSliderOptions_MSGTYPE SOCDSliderOptions
#define AddonOptions_snesOptions_MSGTYPE SNESOptions
#define AddonOptions_focusModeOptions_MSGTYPE FocusModeOptions
#define AddonOptions_keyboardHostOptions_MSGTYPE KeyboardHostOptions
#define AddonOptions_tiltOptions_MSGTYPE TiltOptions
#define AddonOptions_psPassthroughOptions_MSGTYPE PSPassthroughOptions
#define AddonOptions_macroOptions_MSGTYPE MacroOptions
#define AddonOptions_inputHistoryOptions_MSGTYPE InputHistoryOptions
#define AddonOptions_xbonePassthroughOptions_MSGTYPE XBOnePassthroughOptions
#define AddonOptions_analogADS1256Options_MSGTYPE AnalogADS1256Options
#define AddonOptions_rotaryOptions_MSGTYPE RotaryOptions
#define AddonOptions_pcf8575Options_MSGTYPE PCF8575Options
#define AddonOptions_drv8833RumbleOptions_MSGTYPE DRV8833RumbleOptions
#define AddonOptions_reactiveLEDOptions_MSGTYPE ReactiveLEDOptions

#define MigrationHistory_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     hotkeysMigrated,                  1, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     gpioMappingsMigrated,             2, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     buttonProfilesMigrated,           3, 0) \
X(a, STATIC,   OPTIONAL, BOOL,     profileEnabledFlagsMigrated,      4, 0)
#define MigrationHistory_CALLBACK NULL
#define MigrationHistory_DEFAULT (const pb_byte_t*)"\x08\x00\x10\x00\x18\x00\x20\x00\x00"

#define Config_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   boardVersion,                     1, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gamepadOptions,                   2, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  hotkeyOptions,                    3, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  deprecatedPinMappings,            4, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  keyboardMapping,                  5, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  displayOptions,                   6, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ledOptions,                       7, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  animationOptions,                 8, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  addonOptions,                     9, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  forcedSetupOptions,              10, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  profileOptions,                  11, 0) \
X(a, STATIC,   OPTIONAL, STRING,   boardConfig,                     12, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gpioMappings,                    13, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  migrations,                      14, 0) \
X(a, STATIC,   OPTIONAL, MESSAGE,  peripheralOptions,               15, 0) \
X(a, STATIC,   OPTIONAL, UINT32,   CSmode,                          16, 0)
#define Config_CALLBACK NULL
#define Config_DEFAULT NULL
#define Config_gamepadOptions_MSGTYPE GamepadOptions
#define Config_hotkeyOptions_MSGTYPE HotkeyOptions
#define Config_deprecatedPinMappings_MSGTYPE PinMappings
#define Config_keyboardMapping_MSGTYPE KeyboardMapping
#define Config_displayOptions_MSGTYPE DisplayOptions
#define Config_ledOptions_MSGTYPE LEDOptions
#define Config_animationOptions_MSGTYPE AnimationOptions_Proto
#define Config_addonOptions_MSGTYPE AddonOptions
#define Config_forcedSetupOptions_MSGTYPE ForcedSetupOptions
#define Config_profileOptions_MSGTYPE ProfileOptions
#define Config_gpioMappings_MSGTYPE GpioMappings
#define Config_migrations_MSGTYPE MigrationHistory
#define Config_peripheralOptions_MSGTYPE PeripheralOptions

extern const pb_msgdesc_t GamepadOptions_msg;
extern const pb_msgdesc_t KeyboardMapping_msg;
extern const pb_msgdesc_t HotkeyEntry_msg;
extern const pb_msgdesc_t HotkeyOptions_msg;
extern const pb_msgdesc_t PeripheralOptions_msg;
extern const pb_msgdesc_t PeripheralOptions_I2COptions_msg;
extern const pb_msgdesc_t PeripheralOptions_SPIOptions_msg;
extern const pb_msgdesc_t PeripheralOptions_USBOptions_msg;
extern const pb_msgdesc_t ForcedSetupOptions_msg;
extern const pb_msgdesc_t ButtonLayoutParamsCommon_msg;
extern const pb_msgdesc_t ButtonLayoutParamsLeft_msg;
extern const pb_msgdesc_t ButtonLayoutParamsRight_msg;
extern const pb_msgdesc_t ButtonLayoutCustomOptions_msg;
extern const pb_msgdesc_t PinMappings_msg;
extern const pb_msgdesc_t GpioMappingInfo_msg;
extern const pb_msgdesc_t GpioMappings_msg;
extern const pb_msgdesc_t AlternativePinMappings_msg;
extern const pb_msgdesc_t ProfileOptions_msg;
extern const pb_msgdesc_t DisplayOptions_msg;
extern const pb_msgdesc_t LEDOptions_msg;
extern const pb_msgdesc_t AnimationOptions_Proto_msg;
extern const pb_msgdesc_t BootselButtonOptions_msg;
extern const pb_msgdesc_t OnBoardLedOptions_msg;
extern const pb_msgdesc_t AnalogOptions_msg;
extern const pb_msgdesc_t TurboOptions_msg;
extern const pb_msgdesc_t SliderOptions_msg;
extern const pb_msgdesc_t SOCDSliderOptions_msg;
extern const pb_msgdesc_t ReverseOptions_msg;
extern const pb_msgdesc_t AnalogADS1219Options_msg;
extern const pb_msgdesc_t AnalogADS1256Options_msg;
extern const pb_msgdesc_t DualDirectionalOptions_msg;
extern const pb_msgdesc_t TiltOptions_msg;
extern const pb_msgdesc_t BuzzerOptions_msg;
extern const pb_msgdesc_t ExtraButtonOptions_msg;
extern const pb_msgdesc_t PlayerNumberOptions_msg;
extern const pb_msgdesc_t PS4Options_msg;
extern const pb_msgdesc_t PSPassthroughOptions_msg;
extern const pb_msgdesc_t XBOnePassthroughOptions_msg;
extern const pb_msgdesc_t WiiOptions_msg;
extern const pb_msgdesc_t WiiOptions_AnalogAxis_msg;
extern const pb_msgdesc_t WiiOptions_StickOptions_msg;
extern const pb_msgdesc_t WiiOptions_NunchukOptions_msg;
extern const pb_msgdesc_t WiiOptions_ClassicOptions_msg;
extern const pb_msgdesc_t WiiOptions_TaikoOptions_msg;
extern const pb_msgdesc_t WiiOptions_GuitarOptions_msg;
extern const pb_msgdesc_t WiiOptions_DrumOptions_msg;
extern const pb_msgdesc_t WiiOptions_TurntableOptions_msg;
extern const pb_msgdesc_t WiiOptions_ControllerOptions_msg;
extern const pb_msgdesc_t SNESOptions_msg;
extern const pb_msgdesc_t KeyboardHostOptions_msg;
extern const pb_msgdesc_t FocusModeOptions_msg;
extern const pb_msgdesc_t MacroInput_msg;
extern const pb_msgdesc_t Macro_msg;
extern const pb_msgdesc_t MacroOptions_msg;
extern const pb_msgdesc_t InputHistoryOptions_msg;
extern const pb_msgdesc_t RotaryPinOptions_msg;
extern const pb_msgdesc_t RotaryOptions_msg;
extern const pb_msgdesc_t PCF8575Options_msg;
extern const pb_msgdesc_t DRV8833RumbleOptions_msg;
extern const pb_msgdesc_t ReactiveLEDInfo_msg;
extern const pb_msgdesc_t ReactiveLEDOptions_msg;
extern const pb_msgdesc_t AddonOptions_msg;
extern const pb_msgdesc_t MigrationHistory_msg;
extern const pb_msgdesc_t Config_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define GamepadOptions_fields &GamepadOptions_msg
#define KeyboardMapping_fields &KeyboardMapping_msg
#define HotkeyEntry_fields &HotkeyEntry_msg
#define HotkeyOptions_fields &HotkeyOptions_msg
#define PeripheralOptions_fields &PeripheralOptions_msg
#define PeripheralOptions_I2COptions_fields &PeripheralOptions_I2COptions_msg
#define PeripheralOptions_SPIOptions_fields &PeripheralOptions_SPIOptions_msg
#define PeripheralOptions_USBOptions_fields &PeripheralOptions_USBOptions_msg
#define ForcedSetupOptions_fields &ForcedSetupOptions_msg
#define ButtonLayoutParamsCommon_fields &ButtonLayoutParamsCommon_msg
#define ButtonLayoutParamsLeft_fields &ButtonLayoutParamsLeft_msg
#define ButtonLayoutParamsRight_fields &ButtonLayoutParamsRight_msg
#define ButtonLayoutCustomOptions_fields &ButtonLayoutCustomOptions_msg
#define PinMappings_fields &PinMappings_msg
#define GpioMappingInfo_fields &GpioMappingInfo_msg
#define GpioMappings_fields &GpioMappings_msg
#define AlternativePinMappings_fields &AlternativePinMappings_msg
#define ProfileOptions_fields &ProfileOptions_msg
#define DisplayOptions_fields &DisplayOptions_msg
#define LEDOptions_fields &LEDOptions_msg
#define AnimationOptions_Proto_fields &AnimationOptions_Proto_msg
#define BootselButtonOptions_fields &BootselButtonOptions_msg
#define OnBoardLedOptions_fields &OnBoardLedOptions_msg
#define AnalogOptions_fields &AnalogOptions_msg
#define TurboOptions_fields &TurboOptions_msg
#define SliderOptions_fields &SliderOptions_msg
#define SOCDSliderOptions_fields &SOCDSliderOptions_msg
#define ReverseOptions_fields &ReverseOptions_msg
#define AnalogADS1219Options_fields &AnalogADS1219Options_msg
#define AnalogADS1256Options_fields &AnalogADS1256Options_msg
#define DualDirectionalOptions_fields &DualDirectionalOptions_msg
#define TiltOptions_fields &TiltOptions_msg
#define BuzzerOptions_fields &BuzzerOptions_msg
#define ExtraButtonOptions_fields &ExtraButtonOptions_msg
#define PlayerNumberOptions_fields &PlayerNumberOptions_msg
#define PS4Options_fields &PS4Options_msg
#define PSPassthroughOptions_fields &PSPassthroughOptions_msg
#define XBOnePassthroughOptions_fields &XBOnePassthroughOptions_msg
#define WiiOptions_fields &WiiOptions_msg
#define WiiOptions_AnalogAxis_fields &WiiOptions_AnalogAxis_msg
#define WiiOptions_StickOptions_fields &WiiOptions_StickOptions_msg
#define WiiOptions_NunchukOptions_fields &WiiOptions_NunchukOptions_msg
#define WiiOptions_ClassicOptions_fields &WiiOptions_ClassicOptions_msg
#define WiiOptions_TaikoOptions_fields &WiiOptions_TaikoOptions_msg
#define WiiOptions_GuitarOptions_fields &WiiOptions_GuitarOptions_msg
#define WiiOptions_DrumOptions_fields &WiiOptions_DrumOptions_msg
#define WiiOptions_TurntableOptions_fields &WiiOptions_TurntableOptions_msg
#define WiiOptions_ControllerOptions_fields &WiiOptions_ControllerOptions_msg
#define SNESOptions_fields &SNESOptions_msg
#define KeyboardHostOptions_fields &KeyboardHostOptions_msg
#define FocusModeOptions_fields &FocusModeOptions_msg
#define MacroInput_fields &MacroInput_msg
#define Macro_fields &Macro_msg
#define MacroOptions_fields &MacroOptions_msg
#define InputHistoryOptions_fields &InputHistoryOptions_msg
#define RotaryPinOptions_fields &RotaryPinOptions_msg
#define RotaryOptions_fields &RotaryOptions_msg
#define PCF8575Options_fields &PCF8575Options_msg
#define DRV8833RumbleOptions_fields &DRV8833RumbleOptions_msg
#define ReactiveLEDInfo_fields &ReactiveLEDInfo_msg
#define ReactiveLEDOptions_fields &ReactiveLEDOptions_msg
#define AddonOptions_fields &AddonOptions_msg
#define MigrationHistory_fields &MigrationHistory_msg
#define Config_fields &Config_msg

/* Maximum encoded size of messages (where known) */
#define AddonOptions_size                        9281
#define AlternativePinMappings_size              132
#define AnalogADS1219Options_size                57
#define AnalogADS1256Options_size                42
#define AnalogOptions_size                       84
#define AnimationOptions_Proto_size              306
#define BootselButtonOptions_size                8
#define ButtonLayoutCustomOptions_size           100
#define ButtonLayoutParamsCommon_size            44
#define ButtonLayoutParamsLeft_size              48
#define ButtonLayoutParamsRight_size             48
#define BuzzerOptions_size                       30
#define Config_size                              16181
#define DRV8833RumbleOptions_size                51
#define DisplayOptions_size                      1245
#define DualDirectionalOptions_size              52
#define ExtraButtonOptions_size                  19
#define FocusModeOptions_size                    32
#define ForcedSetupOptions_size                  2
#define GamepadOptions_size                      138
#define GpioMappingInfo_size                     25
#define GpioMappings_size                        830
#define HotkeyEntry_size                         20
#define HotkeyOptions_size                       353
#define InputHistoryOptions_size                 20
#define KeyboardHostOptions_size                 254
#define KeyboardMapping_size                     209
#define LEDOptions_size                          358
#define MacroInput_size                          18
#define MacroOptions_size                        4203
#define Macro_size                               695
#define MigrationHistory_size                    8
#define OnBoardLedOptions_size                   4
#define PCF8575Options_size                      445
#define PS4Options_size                          1717
#define PSPassthroughOptions_size                24
#define PeripheralOptions_I2COptions_size        30
#define PeripheralOptions_SPIOptions_size        46
#define PeripheralOptions_USBOptions_size        30
#define PeripheralOptions_size                   192
#define PinMappings_size                         213
#define PlayerNumberOptions_size                 8
#define ProfileOptions_size                      2904
#define ReactiveLEDInfo_size                     26
#define ReactiveLEDOptions_size                  282
#define ReverseOptions_size                      48
#define RotaryOptions_size                       96
#define RotaryPinOptions_size                    45
#define SNESOptions_size                         35
#define SOCDSliderOptions_size                   30
#define SliderOptions_size                       30
#define TiltOptions_size                         219
#define TurboOptions_size                        141
#define WiiOptions_AnalogAxis_size               33
#define WiiOptions_ClassicOptions_size           383
#define WiiOptions_ControllerOptions_size        1225
#define WiiOptions_DrumOptions_size              160
#define WiiOptions_GuitarOptions_size            217
#define WiiOptions_NunchukOptions_size           94
#define WiiOptions_StickOptions_size             70
#define WiiOptions_TaikoOptions_size             44
#define WiiOptions_TurntableOptions_size         311
#define WiiOptions_size                          1274
#define XBOnePassthroughOptions_size             2

/* List of all messages (GP2040-CE extension) */
#define CONFIG_MESSAGES_GP2040(X) \
X(GamepadOptions) \
X(KeyboardMapping) \
X(HotkeyEntry) \
X(HotkeyOptions) \
X(PeripheralOptions) \
X(PeripheralOptions_I2COptions) \
X(PeripheralOptions_SPIOptions) \
X(PeripheralOptions_USBOptions) \
X(ForcedSetupOptions) \
X(ButtonLayoutParamsCommon) \
X(ButtonLayoutParamsLeft) \
X(ButtonLayoutParamsRight) \
X(ButtonLayoutCustomOptions) \
X(PinMappings) \
X(GpioMappingInfo) \
X(GpioMappings) \
X(AlternativePinMappings) \
X(ProfileOptions) \
X(DisplayOptions) \
X(LEDOptions) \
X(AnimationOptions_Proto) \
X(BootselButtonOptions) \
X(OnBoardLedOptions) \
X(AnalogOptions) \
X(TurboOptions) \
X(SliderOptions) \
X(SOCDSliderOptions) \
X(ReverseOptions) \
X(AnalogADS1219Options) \
X(AnalogADS1256Options) \
X(DualDirectionalOptions) \
X(TiltOptions) \
X(BuzzerOptions) \
X(ExtraButtonOptions) \
X(PlayerNumberOptions) \
X(PS4Options) \
X(PSPassthroughOptions) \
X(XBOnePassthroughOptions) \
X(WiiOptions) \
X(WiiOptions_AnalogAxis) \
X(WiiOptions_StickOptions) \
X(WiiOptions_NunchukOptions) \
X(WiiOptions_ClassicOptions) \
X(WiiOptions_TaikoOptions) \
X(WiiOptions_GuitarOptions) \
X(WiiOptions_DrumOptions) \
X(WiiOptions_TurntableOptions) \
X(WiiOptions_ControllerOptions) \
X(SNESOptions) \
X(KeyboardHostOptions) \
X(FocusModeOptions) \
X(MacroInput) \
X(Macro) \
X(MacroOptions) \
X(InputHistoryOptions) \
X(RotaryPinOptions) \
X(RotaryOptions) \
X(PCF8575Options) \
X(DRV8833RumbleOptions) \
X(ReactiveLEDInfo) \
X(ReactiveLEDOptions) \
X(AddonOptions) \
X(MigrationHistory) \
X(Config) \

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
